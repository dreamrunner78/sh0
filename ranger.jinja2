nameOverride: "{{ nameOverride }}"
fullnameOverride: "{{ fullnameOverride }}"
namespaceOverride: "{{ namespace }}"
architecture: {{ architecture }}
schedulerName: "{{ kubeschedulername }}"
clusterDomain: {{ clusterDomain }}
runasuser: "{{ runasuser }}"
entrepriseedition: {{ entrepriseedition }}
storageClassName: "{{ storageClassName }}"


replicaCount: {{ replicaCount }}
podManagementPolicy: Parallel

persistence:
  enabled: {{ enablestorage }}
  size: {{ size }}G

global:
  {%- if imagePullSecrets is defined and imagePullSecrets|length > 0 %}
  imagePullSecrets:
  {%- for secret in imagePullSecrets %}
    - {{ secret }}
  {%- endfor %}
  {%- else %}
  imagePullSecrets: []
  {%- endif %}

image:
  registry: "{{ registry }}"
  repository: "{{ repository }}"
  pullPolicy: "{{ pullpolicy }}"
  tag: "{{ tag }}"
  pullSecrets: []

{%- if commonLabels is defined and commonLabels|length > 0 %}
commonLabels:
{%- for commonLabel in commonLabels %}
  {{ commonLabel.name }}: {{ commonLabel.value }}
{%- endfor %}
{%- else %}
commonLabels: {}
{%- endif %}

{%- if commonAnnotations is defined and commonAnnotations|length > 0 %}
commonAnnotations:
{%- for commonAnnotation in commonAnnotations %}
  {{ commonAnnotation.name }}: {{ commonAnnotation.value }}
{%- endfor %}
{%- else %}
commonAnnotations: {}
{%- endif %}

{%- if podLabels is defined and podLabels|length > 0 %}
podLabels:
{%- for podLabel in podLabels %}
  {{ podLabel.name }}: {{ podLabel.value }}
{%- endfor %}
{%- else %}
podLabels: {}
{%- endif %}

{%- if podAnnotations is defined and podAnnotations|length > 0 %}
podAnnotations:
{%- for podAnnotation in podAnnotations %}
  {{ podAnnotation.name }}: {{ podAnnotation.value }}
{%- endfor %}
{%- else %}
podAnnotations: {}
{%- endif %}


{%- if securityContext is defined and securityContext|length > 0 %}
securityContext:
{%- for item in securityContext %}
  {{ item.name }}: {{ item.value }}
{%- endfor %}
{%- else %}
securityContext: {}
{%- endif %}

{%- if hostAliases is defined and hostAliases|length > 0 %}
hostAliases:
{{ hostAliases|indent(2, True) }}
{%- else %}
hostAliases: []
{%- endif %}

{%- if dnsConfig is defined and dnsConfig|length > 0 %}
dnsConfig:
{{ dnsConfig|indent(2, True) }}
{%- else %}
dnsConfig: []
{%- endif %}

{%- if nodeSelector is defined and nodeSelector|length > 0 %}
nodeSelector:
{%- for item in nodeSelector %}
  {{ item.name }}: {{ item.value }}
{%- endfor %}
{%- else %}
nodeSelector: {}
{%- endif %}

tolerations: []

topologySpreadConstraints: []

podManagementPolicy: Parallel

priorityClassName: ""

schedulerName: ""

podSecurityContext:
  enabled: true
  runAsNonRoot: true
  runAsUser: {{ runasuser }}
  fsGroup: {{ runasuser }}
  
containerSecurityContext:
  enabled: true
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: {{runasuser}}
  allowPrivilegeEscalation: false
  seccompProfile:
    type: RuntimeDefault
  capabilities:
    drop: ["ALL"]

serviceAccount:
  enabled: false
  create: false
  annotations: {}
  name: "dcp-ranger-{{ name }}"

service:
  type: ClusterIP
  ports:
    http: {{ rangerport }}
    https: {{ rangerport }}
  nodePorts:
    http: ""
    https: ""
  clusterIP: ""
  annotations: {}

security:
  ssl:
    enabled: false
    autoGenerated: false

tlsingress:
  ssl:
    enabled: {{ enableingresstls}}
    autoGenerated: {{ enableingresstls}}

ingress:
  enabled: {{ enableingress }}
  {%- if ingressnumber %}
  ingresstype: {{ rangerport }}
  {%- else %}
  ingresstype: http
  {%- endif %}  
  pathType: ImplementationSpecific
  apiVersion: ""
  hostname: {{ ingresshostname }}
  ingressClassName: ""
  path: /
  className: ""
  {%- if nginxannotation is defined and nginxannotation|length > 0 %}
  annotations:
{{ nginxannotation|indent(4, True) }}
    {%- if enableingresstls %}
    #route.openshift.io/termination: passthrough
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    {%- endif %}
  {%- else %}
  annotations: {}
  {%- endif %}
  tls: {{ enableingresstls }}
  selfSigned: {{ enableingresstls }}
  extraHosts: []
  extraPaths: []
  extraTls: []
  secrets: []
  extraRules: []

resources:
  requests:
    memory: {{ requestmem }}{{ unitrequestmem }}
    cpu: {{ requestcpu }}{% if unitrequestcpu == "m" %}m{% endif %}
  limits: 
    memory: {{ limitmem }}{{ unitlimitmem }}
    cpu: {{ limitcpu }}{% if unitlimitcpu == "m" %}m{% endif %}
    
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

updateStrategy:
  type: RollingUpdate
  rollingUpdate: {}

ranger:
  homedir: /opt/ranger
  postgres: {{ dbhost }}:{{ portpgs }}
  #postgres: {{name}}-{{nameOverride}}pgs{% if architecture == 'replication' %}-primary{% endif %}.{{namespace}}.{{clusterDomain}}:{{ portpgs }}
  initScriptsCM: true
  AUDIT_STORE: "{{ auditstore }}"
  AUDIT_SOLR_URLS: "{{ solrhost }}"
  AUDIT_SOLR_USER: "{{ solruser }}"
  AUDIT_SOLR_PASSWORD: "{{ solrpassword }}"
  RANGERADMIN_PASSWORD: "{{ rangeradminpassword }}"
  RANGERTAGSYNC_PASSWORD: "{{ rangeradminpassword }}"
  RANGERUSERSYNC_PASSWORD: "{{ rangeradminpassword }}"
  KEYADMIN_PASSWORD: "{{ rangeradminpassword }}"
  RANGER_HEAP_SIZE: "{{ rangerheapsize }}"

checkdbready:
    image: {{ initimage }}
    waittime: 5
    command: until nslookup {{ dbhost }}; do echo waiting for database; sleep 5; done;
    #command: until nslookup {{name}}-{{nameOverride}}pgs{% if architecture == 'replication' %}-primary{% endif %}-0.{{name}}-{{nameOverride}}pgs{% if architecture == 'replication' %}-primary{% endif %}-hl.{{namespace}}.{{clusterDomain}}; do echo waiting for database; sleep 5; done;

customLivenessProbe: {}
livenessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 5
  timeoutSeconds: 15
  failureThreshold: 30
  successThreshold: 1

customReadinessProbe: {}
readinessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 5
  timeoutSeconds: 15
  failureThreshold: 30
  successThreshold: 1

customStartupProbe: {}
startupProbe:
  enabled: false
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 15
  successThreshold: 1

# For database
postgresql:
  enabled: true
  nameOverride: "{{nameOverride}}pgs"
  fullnameOverride: ""
  architecture: {{ architecture }}  
  
  {%- if podLabels is defined and podLabels|length > 0 %}
  commonLabels:
  {%- for commonLabel in podLabels %}
    {{ commonLabel.name }}: {{ commonLabel.value }}
  {%- endfor %}
  {%- else %}
  commonLabels: {}
  {%- endif %}
  {%- if podLabels is defined and podLabels|length > 0 %}
  podLabels:
  {%- for podLabel in podLabels %}
    {{ podLabel.name }}: {{ podLabel.value }}
  {%- endfor %}
  {%- else %}
  podLabels: {}
  {%- endif %}

  {%- if commonAnnotations is defined and commonAnnotations|length > 0 %}
  commonAnnotations:
  {%- for commonAnnotation in commonAnnotations %}
    {{ commonAnnotation.name }}: {{ commonAnnotation.value }}
  {%- endfor %}
  {%- else %}
  commonAnnotations: {}
  {%- endif %}

  {%- if podAnnotations is defined and podAnnotations|length > 0 %}
  podAnnotations:
  {%- for podAnnotation in podAnnotations %}
    {{ podAnnotation.name }}: {{ podAnnotation.value }}
  {%- endfor %}
  {%- else %}
  podAnnotations: {}
  {%- endif %}

  volumePermissions:
    enabled: false
    securityContext:
      runAsUser: "auto"

  shmVolume:
    chmod:
      enabled: false  
  
  image:
    registry: {{ pgsregistry }}
    repository: {{ pgsrepository }}
    tag: {{ pgstag }}
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []

  containerPorts:
    postgresql: {{portpgs}}

  global:
    {%- if imagePullSecrets is defined and imagePullSecrets|length > 0 %}
    imagePullSecrets:
    {%- for imagePullSecret in imagePullSecrets %}
      - {{ imagePullSecret }}
    {%- endfor %}
    {%- else %}
    imagePullSecrets: []
    {%- endif %}  
    storageClass: {{ storageClassName }}
    postgresql:
      auth:
        postgresPassword: "{{ dbrootpassword }}"
        username: "{{ dbuser }}"
        password: "{{ dbpassword }}"
        database: "{{ dbname }}"

  primary:
    schedulerName: "{{ kubeschedulername }}"

    podSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: {{ runasuser }}
      fsGroup: {{ runasuser }}

    containerSecurityContext:
      enabled: true
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: {{runasuser}}
      allowPrivilegeEscalation: false
      seccompProfile:
        type: RuntimeDefault
        #localhostProfile: 
      capabilities:
        drop: ["ALL"]

    extraVolumeMounts:
      # if readonly filesystem
      - name: dcp-conf
        mountPath: /opt/bitnami
      {%- if not dbpersist %}
      # If persistence is disabled
      - name: dcp-data
        mountPath: /opt/dcp
      {%- endif %}
      - name: dcp-tmp
        mountPath: /tmp
    extraVolumes:
      # if readonly filesystem
      - name: dcp-conf
        emptyDir: {}
      {%- if not dbpersist %}
      # If persistence is disabled
      - name: dcp-data
        emptyDir: {}
      {%- endif %}
      - name: dcp-tmp
        emptyDir: {}

    command:
      - bash
      - -c
      - |
        cp -R /opt/dsp/postgresql /opt/bitnami
        cp -R /opt/dsp/licenses /opt/bitnami
        cp -R /opt/dsp/scripts /opt/bitnami
        cp -R /opt/dsp/common /opt/bitnami

        chmod 777 "/opt/bitnami/*"
        chmod -R 777 "/opt/bitnami/*"

        /opt/bitnami/scripts/postgresql/postunpack.sh
        /opt/bitnami/scripts/locales/add-extra-locales.sh

        export APP_VERSION="15.4.0"
        export BITNAMI_APP_NAME="postgresql"
        export LANG="en_US.UTF-8"
        export LANGUAGE="en_US:en"
        export NSS_WRAPPER_LIB="/opt/bitnami/common/lib/libnss_wrapper.so"
        export PATH="/opt/bitnami/postgresql/bin:$PATH"

        # if persistence is disabled
        {%- if not dbpersist %}
        mkdir /bitnami/postgresql/data
        {%- endif %}

        /opt/bitnami/scripts/postgresql/entrypoint.sh /opt/bitnami/scripts/postgresql/run.sh

    persistence:
      enabled: {{ dbpersist }}
      storageClass: {{ storageClassName }}
      size: {{ dbsize }}Mi
      labels: 
        {%- if podLabels is defined and podLabels|length > 0 %}
        {%- for podLabel in podLabels %}
        {{ podLabel.name }}: "{{ podLabel.value }}"
        {%- endfor %}
        {%- else %}
        release: {{ nameOverride }}
        {%- endif %}
    resources:
      limits: 
        memory: {{ limitmempgs }}{{unitlimitmempgs}}
        cpu: {{ limitcpupgs }}{% if unitlimitcpupgs == "m" %}m{% endif %}
      requests:
        memory: {{ requestmempgs }}{{unitrequestmempgs}}
        cpu: {{ requestcpupgs }}{% if unitrequestcpupgs == "m" %}m{% endif %}

  readReplicas:
    name: read
    replicaCount: {{ readreplicas }}
    schedulerName: "{{ kubeschedulername }}"
    podSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: {{ runasuser }}
      fsGroup: {{ runasuser }}

    containerSecurityContext:
      enabled: true
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: {{runasuser}}
      allowPrivilegeEscalation: false
      seccompProfile:
        type: RuntimeDefault
        #localhostProfile: 
      capabilities:
        drop: ["ALL"]

    extraVolumeMounts:
      # if readonly filesystem
      - name: dcp-conf
        mountPath: /opt/bitnami
      {%- if not dbpersist %}
      # If persistence is disabled
      - name: dcp-data
        mountPath: /opt/dcp
      {%- endif %}
      - name: dcp-tmp
        mountPath: /tmp
    extraVolumes:
      # if readonly filesystem
      - name: dcp-conf
        emptyDir: {}
      {%- if not dbpersist %}
      # If persistence is disabled
      - name: dcp-data
        emptyDir: {}
      {%- endif %}
      - name: dcp-tmp
        emptyDir: {}

    command:
      - bash
      - -c
      - |
        cp -R /opt/dsp/postgresql /opt/bitnami
        cp -R /opt/dsp/licenses /opt/bitnami
        cp -R /opt/dsp/scripts /opt/bitnami
        cp -R /opt/dsp/common /opt/bitnami

        chmod 777 "/opt/bitnami/*"
        chmod -R 777 "/opt/bitnami/*"

        /opt/bitnami/scripts/postgresql/postunpack.sh
        /opt/bitnami/scripts/locales/add-extra-locales.sh

        export APP_VERSION="15.4.0"
        export BITNAMI_APP_NAME="postgresql"
        export LANG="en_US.UTF-8"
        export LANGUAGE="en_US:en"
        export NSS_WRAPPER_LIB="/opt/bitnami/common/lib/libnss_wrapper.so"
        export PATH="/opt/bitnami/postgresql/bin:$PATH"

        # if persistence is disabled
        {%- if not dbpersist %}
        mkdir /bitnami/postgresql/data
        {%- endif %}

        /opt/bitnami/scripts/postgresql/entrypoint.sh /opt/bitnami/scripts/postgresql/run.sh

    persistence:
      enabled: {{ dbpersist }}
      storageClass: {{ storageClassName }}
      size: {{ dbsize }}Mi
      labels: 
        {%- if podLabels is defined and podLabels|length > 0 %}
        {%- for podLabel in podLabels %}
        {{ podLabel.name }}: "{{ podLabel.value }}"
        {%- endfor %}
        {%- else %}
        release: {{ nameOverride }}
        {%- endif %}
    resources:
      limits: 
        memory: {{ limitmempgs }}{{unitlimitmempgs}}
        cpu: {{ limitcpupgs }}{% if unitlimitcpupgs == "m" %}m{% endif %}
      requests:
        memory: {{ requestmempgs }}{{unitrequestmempgs}}
        cpu: {{ requestcpupgs }}{% if unitrequestcpupgs == "m" %}m{% endif %}   