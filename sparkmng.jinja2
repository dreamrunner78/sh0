name: "{{ name }}"
nameOverride: "{{ nameOverride }}"
fullnameOverride: "{{ fullnameOverride }}"
namespaceOverride: "{{ namespace }}"
runasuser: "{{ runasuser }}"

clusterDomain: {{ clusterDomain }}

storageClassName: "{{ storageClassName }}"
{%- if storageclassannotation is defined %}
storageclassannotation:
{{ storageclassannotation|indent(2, True) }}
{%- else %}
storageclassannotation: {}
{%- endif %}


enableingresstls: {{ enableingresstls }}
usedcpingress: {{usedcpingress}}
enableauthent: {{enableauthent}}


global:
  {%- if imagePullSecrets is defined and imagePullSecrets|length > 0 %}
  imagePullSecrets:
  {%- for imagePullSecret in imagePullSecrets %}
    - {{ imagePullSecret }}
  {%- endfor %}
  {%- else %}
  imagePullSecrets: []
  {%- endif %}
  
{%- if commonLabels is defined and commonLabels|length > 0 %}
commonLabels:
{%- for commonLabel in commonLabels %}
  {{ commonLabel.name }}: "{{ commonLabel.value }}"
{%- endfor %}
{%- else %}
commonLabels: {}
{%- endif %}

{%- if commonAnnotations is defined and commonAnnotations|length > 0 %}
commonAnnotations:
{%- for commonAnnotation in commonAnnotations %}
  {{ commonAnnotation.name }}: "{{ commonAnnotation.value }}"
{%- endfor %}
{%- else %}
commonAnnotations: {}
{%- endif %}

{%- if podLabels is defined and podLabels|length > 0 %}
podLabels:
{%- for podLabel in podLabels %}
  {{ podLabel.name }}: "{{ podLabel.value }}"
{%- endfor %}
{%- else %}
podLabels: {}
{%- endif %}

{%- if podAnnotations is defined and podAnnotations|length > 0 %}
podAnnotations:
{%- for podAnnotation in podAnnotations %}
  {{ podAnnotation.name }}: "{{ podAnnotation.value }}"
{%- endfor %}
{%- else %}
podAnnotations: {}
{%- endif %}



hostNetwork: false

{%- if dnsConfig is defined %}
dnsConfig:
{{ dnsConfig|indent(2, True) }}
{%- else %}
dnsConfig: []
{%- endif %}

{%- if hostAliases is defined %}
hostAliases:
{{ hostAliases|indent(2, True) }}
{%- else %}
hostAliases: []
{%- endif %}

nodeSelector: {}

tolerations: []

affinity: {}

topologySpreadConstraints: []

priorityClassName: "{{ priorityclassname }}"

schedulerName: "{{ kubeschedulername }}"

updateStrategy:
  type: RollingUpdate


terminationGracePeriodSeconds: ""



{%- if securityContext is defined and securityContext|length > 0 %}
securityContext:
{%- for item in securityContext %}
  {{ item.name }}: {{ item.value }}
{%- endfor %}
{%- else %}
securityContext: {}
{%- endif %}

serviceAccount:
  enabled: true
  create: {{ specifyserviceaccount }}
  name: "{{ servicecaccount }}"
  {%- if podAnnotations is defined and podAnnotations|length > 0 %}
  annotations:
  {%- for podAnnotation in podAnnotations %}
    {{ podAnnotation.name }}: "{{ podAnnotation.value }}"
  {%- endfor %}
  {%- else %}
  annotations: {}
  {%- endif %}
  automountServiceAccountToken: true  

certmanager:
  enabled: {{ certmanager }}
  issuer: ca-issuer
  duration: 8760h
  renewBefore: 2208h
  dnsNames:
    - "*.svc.cluster.local" 
    - "*.*.*.svc.cluster.local"
    - "*.*.svc.cluster.local"
    - "*.dcp-technologies.com"
    - "*.test"
    - "localhost"
    - "*.apps.sandbox-m2.ll9k.p1.openshiftapps.com"

security:
  ssl:
    enabled: false
    autoGenerated: true

oauth:
  registry: "{{ oauthregistry }}"
  repository: "{{ oauthrepository }}"
  pullPolicy: "{{ pullpolicy }}"
  tag: "{{ oauthtag }}"
  pullSecrets: []
  cookiesecret: "{{clientsecret}}"
  oidcissuer: "{{ ingressUrl }}/realms/{{realm}}"
  ingresshostname: "{{ ingresshostname }}"
  proxyscope: "email openid profile"
  allwedgroups: "{{realm}}"
  allwedroles: "{{realm}},{{name}}"
  idclient: "{{name}}"
  clientsecret: "{{clientsecret}}"
  realm: "{{realm}}"
  setauthorizationheader: false
  passauthorizationheader: false
  skipproviderbutton: true
  whitelistdomain: "{{ whitelistdomain }}"
  redisurl: "{{ redisurl }}"
  redispassword: "{{ redispassword }}"
  sessionstore: "{{ sessionstore }}"


influxdb:
  image:
    registry: "{{ influxregistry }}"
    repository: "{{ influxrepository }}"
    pullPolicy: "{{ pullpolicy }}"
    tag: "{{ influxtag }}"
    pullSecrets: []
  
  replicas: {{ influxreplicas }}
  enablestorage: {{ enablestorageinflux }}

  podSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: {{ runasuser }}
    fsGroup: {{ runasuser }}
  
  containerSecurityContext:
    enabled: true
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: {{ runasuser }}
    allowPrivilegeEscalation: false
    seccompProfile:
      type: RuntimeDefault
    capabilities:
      drop: ["ALL"]

  {% if unitlimitcpu == "m" %}m{% endif %}
  resources: 
    limits: 
        memory: {{ influxlimitmem }}{{ influxunitlimitmem }}
        cpu: {{  influxlimitcpu }}{% if influxunitlimitcore == "m" %}m{% endif %}
    requests:
        memory: {{  influxrequestmem }}{{ influxunitrequestmem }}
        cpu: {{  influxrequestcpu }}{% if influxunitrequestcore == "m" %}m{% endif %}

  disableReporting: "true"

  dbName: "graphite"
  service:
    type: "ClusterIP"
    clusterIP: ""
    annotations: {}
    influx:
      port: {{ influxport }}
      targetPort: {{ influxport }}
    graphite:
      port: {{ influxgraphite }}
      targetPort: {{ influxgraphite }}
  storage:
     size: "{{ datasizeinflux }}G"
     class: "{{ storageClassName }}"


grafana:
  enabled: {{ enablegrafana }}
  image:
    registry: "{{ grafanaregistry }}"
    repository: "{{ grafanarepository }}"
    pullPolicy: "{{ pullpolicy }}"
    tag: "latest"
    pullSecrets: []
  
  replicas: {{ grafanareplicas }}

  podSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: {{ runasuser }}
    fsGroup: {{ runasuser }}
  
  containerSecurityContext:
    enabled: true
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: {{ runasuser }}
    allowPrivilegeEscalation: false
    seccompProfile:
      type: RuntimeDefault
    capabilities:
      drop: ["ALL"]

  resources: 
    limits: 
        memory: {{ grafanalimitmem }}{{ grafanaunitlimitmem }}
        cpu: {{ grafanalimitcpu }}{% if grafanaunitlimitcore == "m" %}m{% endif %}
    requests:
        memory: {{ grafanarequestmem }}{{ grafanaunitrequestmem }}
        cpu: {{ grafanarequestcpu }}{% if grafanaunitrequestcore == "m" %}m{% endif %}

  grafana.ini:
    paths:
      data: /var/lib/grafana/
      logs: /var/log/grafana
      plugins: /var/lib/grafana/plugins
      provisioning: /etc/grafana/provisioning
    server:
      domain: {{ ingresshostname }}
      {%- if usedcpingress %}
      root_url: https://{{ ingresshostname }}/{{ name }}
      {%- else %}
      root_url: https://{{ ingresshostname }}
      {%- endif %}
      serve_from_sub_path: true
      {# {%- if enableingresstls and not enableauthent %}
      cert_key: /certs/tls.key
      cert_file: /certs/tls.crt
      protocol: https
      {%- endif %} #}
    
    
    {%- if anonymousauthent %}
    auth.anonymous:
      enabled: true
    auth:
      disable_login_form: true
    {%- else %}
    auth.generic_oauth:
      enabled: {{ enableauthent }}
      scopes: openid email profile
      name: Keycloak
      tls_skip_verify_insecure: true
      allow_sign_up: true
      client_id: {{ name }}
      client_secret: {{ clientsecret }}
      auth_url: {{ serverUrl }}/realms/{{ realm }}/protocol/openid-connect/auth
      token_url: {{ serverUrl }}/realms/{{ realm }}/protocol/openid-connect/token
      api_url: {{ serverUrl }}/realms/{{ realm }}/protocol/openid-connect/userinfo
    {%- endif %}


  service:
    type: "ClusterIP"
    clusterIP: ""
    annotations: {}

    port: {{ grafanaport }}
    targetPort: {{ grafanaport }}
    name: grafana

    oauthportname: oauthhttp
    oauthhttp: 4180
    oauthhttps: 4180

  extraVolumeMounts:
    - name: database
      mountPath: /var/lib/grafana
  extraVolumes:
    - name: database
      emptyDir: {}


openshift:
  enabled: {{ enableroute }}
  externalSecure: {{ externalSecure }}
  route:
    host: {{ ingresshostname }}
    {%- if usedcpingress %}
    path: /{{ name }}
    {%- else %}
    path: ""
    {%- endif %}
    targetPort: {{ targetPort }}
    insecureEdgeTerminationPolicy: {{ insecureEdgeTerminationPolicy }}

ingress:
  enabled: {{ not enableroute }}

  {%- if ingressnumber %}

  {%- if usedcpingress %}
  {%- if enableauthent %}
  ingresstype: 4180
  {%- else %}
  ingresstype: {{ grafanaport }}
  {%- endif %}
  {%- else %}
  ingresstype: {{ grafanaport }}
  {%- endif %}
  
  
  {%- else %}
  {%- if enableauthent %}
  ingresstype: oauthhttp
  {%- else %}
  ingresstype: grafana
  {%- endif %}
  {%- endif %}

  pathType: ImplementationSpecific
  apiVersion: ""
  hostname: {{ ingresshostname }}
  ingressClassName: ""
  path: /{{ name }}
  className: ""

  {%- if nginxannotation is defined and nginxannotation|length > 0 %}
  annotations:
{{ nginxannotation|indent(4, True) }}
  {%- else %}
  annotations: {}
  {%- endif %}

  tls: true
  selfSigned: true
  extraHosts: []
  extraPaths: []
  extraTls: []
  secrets: []
  extraRules: []


ca:
  crt: {{ cacrt }}
  key: {{ cakey }}
tls:
  crt: {{ tlscrt }}
  key: {{ tlskey }}

certificate: |-
{{ certificate|indent(4, True) }}
key: |-
{{ key|indent(4, True) }}