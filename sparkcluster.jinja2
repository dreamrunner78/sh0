global:
  imageRegistry: ""
  {%- if imagePullSecrets is defined and imagePullSecrets|length > 0 %}
  imagePullSecrets:
  {%- for imagePullSecret in imagePullSecrets %}
    - {{ imagePullSecret }}
  {%- endfor %}
  {%- else %}
  imagePullSecrets: []
  {%- endif %}
  storageClass: "{{ storageClassName }}"

kubeVersion: ""
name: "{{ name }}"
nameOverride: "{{ nameOverride }}"
fullnameOverride: "{{ fullnameOverride }}"
namespaceOverride: "{{ namespace }}"
clusterDomain: {{ clusterDomain }}

{%- if commonLabels is defined and commonLabels|length > 0 %}
commonLabels:
{%- for commonLabel in commonLabels %}
  {{ commonLabel.name }}: "{{ commonLabel.value }}"
{%- endfor %}
{%- else %}
commonLabels: {}
{%- endif %}

{%- if commonAnnotations is defined and commonAnnotations|length > 0 %}
commonAnnotations:
{%- for commonAnnotation in commonAnnotations %}
  {{ commonAnnotation.name }}: "{{ commonAnnotation.value }}"
{%- endfor %}
{%- else %}
commonAnnotations: {}
{%- endif %}

extraDeploy: []
initScripts: {}
initScriptsCM: ""
initScriptsSecret: ""
diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity
hostNetwork: false

persistence:
  enabled: {{ enablestorage }}
  
  
dcp:
  sparkhome: /opt/spark
  loglevel: {{ loglevel }}
  storageClassName: {{ storageClassName }}
  enablepasswd: {{ enablepasswd }}
  runAsUser: {{ runasuser }}
  shuffleOptions: {{ shuffleoptions }}
  usedcpingress: {{ usedcpingress }}
  
image:
  registry: "{{ registry }}"
  repository: "{{ repository }}"
  tag: "{{ tag }}"
  digest: ""
  pullPolicy: "{{ pullpolicy }}"  
  pullSecrets: []
  debug: false
  
metrics:
  enabled: {{ enablemonitoring }}
  monitoringservicename: {{ monitoringservicename }}  
  prometheus:
    enabled: {{ enableprometheus }}

  masterAnnotations:
    prometheus.io/scrape: 'true'
    prometheus.io/path: '/metrics/'
    prometheus.io/port: '4040'

  workerAnnotations:
    prometheus.io/scrape: 'true'
    prometheus.io/path: '/metrics/'
    prometheus.io/port: '4040'

  podMonitor:
    enabled: false
    extraMetricsEndpoints: []
    namespace: ""
    interval: 30s
    scrapeTimeout: ""
    additionalLabels: {}
  prometheusRule:
    enabled: false
    namespace: ""
    additionalLabels: {}
    rules: []

security:
  passwordsSecretName: ""
  rpc:
    authenticationEnabled: false
    encryptionEnabled: false
  storageEncryptionEnabled: false
  certificatesSecretName: ""
  ssl:
    enabled: {{ securityenabled }}
    needClientAuth: false
    protocol: TLSv1.2
    existingSecret: ""
    autoGenerated: true
    keystorePath: /opt/spark/conf/certs/spark-keystore.jks
    keystorePassword: "bassim"
    truststorePath: /opt/spark/conf/certs/spark-truststore.jks
    truststorePassword: "bassim"
    resources:
      limits: {}
      requests: {}

server:
  {%- if configs is defined and configs|length > 0 %}
  additionalConfigProperties:
  {%- for config in configs %}
    - {{ config }}
  {%- endfor %}
  {%- else %}
  additionalConfigProperties: {}
  {%- endif %}
  
  javaoptions: "{{ javaoptions }}"

  {%- if certs is defined and certs|length > 0 %}
  additionalCertificate: 
  {%- for cert in certs %}
    {{ cert.name }}: |-
{{ cert.value|indent(6, True) }}
  {%- endfor %}
  {%- else %}
  additionalCertificate: {}
  {%- endif %}


service:
  type: ClusterIP
  ports:
    http: 4040
    https: 4040
    cluster: 7077
  nodePorts:
    http: ""
    https: ""
    cluster: ""
  clusterIP: ""
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  externalTrafficPolicy: Cluster
  annotations: {}
  extraPorts: []
  sessionAffinity: None
  sessionAffinityConfig: {}
  headless:
    annotations: {}

serviceAccount:
  enabled: true
  create: {{ specifyserviceaccount }}
  name: "{{ servicecaccount }}"
  {%- if podAnnotations is defined and podAnnotations|length > 0 %}
  annotations:
  {%- for podAnnotation in podAnnotations %}
    {{ podAnnotation.name }}: "{{ podAnnotation.value }}"
  {%- endfor %}
  {%- else %}
  annotations: {}
  {%- endif %}
  automountServiceAccountToken: true 
  
master:
  command: 
    - sh
    - -c
    {%- if certs is defined and certs|length > 0 %}
    - cp /opt/java/openjdk/lib/security/cacerts /tmp/cacerts
    - chmod 777 /tmp/cacerts
    {%- for cert in certs %}
    - keytool -import -noprompt -trustcacerts -alias {{cert.name}} -file /opt/addcert/{{cert.name}} -keystore /tmp/cacerts -storepass changeit
    {%- endfor %}
    {%- endif %}
    - /opt/spark/sbin/start-master.sh
  args: []
  
  containerPorts:
    http: 4040
    https: 4040
    cluster: 7077
  
  {%- if podAnnotations is defined and podAnnotations|length > 0 %}
  podAnnotations:
  {%- for podAnnotation in podAnnotations %}
  {{ podAnnotation.name }}: "{{ podAnnotation.value }}"
  {%- endfor %}
  {%- else %}
  podAnnotations: {}
  {%- endif %}

  {%- if podLabels is defined and podLabels|length > 0 %}
  podLabels:
  {%- for podLabel in podLabels %}
    {{ podLabel.name }}: "{{ podLabel.value }}"
  {%- endfor %}
  {%- else %}
  podLabels: {}
  {%- endif %}

  podAffinityPreset: "soft"

  podAntiAffinityPreset: ""
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  hostAliases: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
  terminationGracePeriodSeconds: ""
  lifecycleHooks: {}
  priorityClassName: {{ priorityclassname }}
  schedulerName: {{ schedulername }}
  
  resources:
    limits: 
      memory: {{ masterlimitmem }}{{ masterunitlimitmem }}
      cpu: {{ masterlimitcpu }}
    requests:
       memory: {{ masterrequestmem }}{{ masterunitrequestmem }}
       cpu: {{ masterrequestcpu }}{{ masterunitrequestcpu }}


  daemonMemoryLimit: "{{ masterdaemonmem }}g"

  javaOptions: {{ javamasteroptions }}
  
  configOptions: {{ finalmasterconfigs }}

  podSecurityContext:
    enabled: true
    #runAsNonRoot: true
    runAsUser: {{ runasuser }}
    runAsGroup: 0
    fsGroup: {{ runasuser }}
    seLinuxOptions: {}  

  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: {{ runasuser }}
    allowPrivilegeEscalation: false
    seccompProfile:
      type: RuntimeDefault
    capabilities:
      drop: ["ALL"]

  pvctemplate:
    - name: logs
      size: {{ logsize}}G
    - name: work
      size: {{ worksize }}G

  extraVolumes: []    

  extraVolumeMounts:
    - name: work
      mountPath: /tmp
    - name: logs
      mountPath: /opt/spark/logs    
  
  existingConfigmap: ""

  extraEnvVars:
    - name: SPARK_WORKER_DIR
      value: /tmp

  extraEnvVarsCM: ""

  extraEnvVarsSecret: ""
  
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 20
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1  
  startupProbe:
    enabled: false
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

worker:
  command: 
    - sh
    - -c
    - /opt/spark/sbin/start-worker.sh $SPARK_MASTER_URL
  args: []

  replicaCount: {{ workerreplicas }}
  containerPorts:
    http: 8080
    https: 8480
    cluster: ""

  podManagementPolicy: OrderedReady

  {%- if podAnnotations is defined and podAnnotations|length > 0 %}
  podAnnotations:
  {%- for podAnnotation in podAnnotations %}
  {{ podAnnotation.name }}: "{{ podAnnotation.value }}"
  {%- endfor %}
  {%- else %}
  podAnnotations: {}
  {%- endif %}

  {%- if podLabels is defined and podLabels|length > 0 %}
  podLabels:
  {%- for podLabel in podLabels %}
    {{ podLabel.name }}: "{{ podLabel.value }}"
  {%- endfor %}
  {%- else %}
  podLabels: {}
  {%- endif %}

  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  hostAliases: []
  nodeSelector: {}
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
  terminationGracePeriodSeconds: ""
  lifecycleHooks: {}
  priorityClassName: {{ priorityclassname }}
  schedulerName: {{ schedulername }}
  
  resources:
    limits: 
      memory: {{ workerlimitmem }}{{ workerunitlimitmem }}
      cpu: {{ workerlimitcpu }}
    requests:
       memory: {{ workerrequestmem }}{{ workerunitrequestmem }}
       cpu: {{ workerrequestcpu }}{{ workerunitrequestcpu }}

  daemonMemoryLimit: "{{ workerdaemonmem }}g"
  memoryLimit: "{{ workermaxmemory }}G"
  coreLimit: "{{ workermaxcores }}"
  javaOptions: {{ javaworkeroptions }}
  configOptions: {{ finalworkerconfigs }}

  podSecurityContext:
    enabled: true
    #runAsNonRoot: true
    runAsUser: {{ runasuser }}
    runAsGroup: 0
    fsGroup: {{ runasuser }}
    seLinuxOptions: {}  

  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: {{ runasuser }}
    allowPrivilegeEscalation: false
    seccompProfile:
      type: RuntimeDefault
    capabilities:
      drop: ["ALL"]  

  pvctemplate:
    - name: logs
      size: {{ logsize}}G
    - name: work
      size: {{ worksize }}G

  extraVolumes: []

  extraVolumeMounts:
    - name: work
      mountPath: /tmp
    - name: logs
      mountPath: /opt/spark/logs
  
  existingConfigmap: ""

  extraEnvVars:
    - name: SPARK_WORKER_DIR
      value: /tmp

  extraEnvVarsCM: ""

  extraEnvVarsSecret: ""
  
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 20
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1  
  startupProbe:
    enabled: false
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  
  sidecars: []
  
  initContainers: []

  autoscaling:
    enabled: {{ enableautoscaling }}
    minReplicas: {{ minreplicas }}
    maxReplicas: {{ maxreplicas }}
    targetCPU: {{ targetcpu }}
    targetMemory: {{ targetmemory }}
    
ingress:
  enabled: {{ enableingress }}
  {%- if ingressnumber %}
  ingresstype: 4040
  {%- else %}
  ingresstype: http
  {%- endif %}
  pathType: ImplementationSpecific
  apiVersion: ""
  hostname: {{ ingresshostname }}
  ingressClassName: ""
  path: /
  className: ""
  {%- if ingressannotations is defined and ingressannotations|length > 0 %}
  annotations:
  {%- for ingressannotation in ingressannotations %}
    {{ ingressannotation.name }}: "{{ ingressannotation.value }}"
  {%- endfor %}
  {%- else %}
  annotations: {}
  {%- endif %}
  tls: {{ securityenabled }}
  selfSigned: {{ generateingresssecret }}
  extraHosts: []
  extraPaths: []
  secrets: []
  extraRules: []