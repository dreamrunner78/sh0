nameOverride: "{{ nameOverride }}"
fullnameOverride: "{{ fullnameOverride }}"
namespaceOverride: "{{ namespaceOverride }}"
enablepasswd: {{ passwd }}
runasuser: "{{ runasuser }}"
clusterDomain: "{{ clusterDomain }}"

storageClassName: "{{ storageClassName }}"
{%- if storageclassannotation is defined %}
storageclassannotation:
{{ storageclassannotation|indent(2, True) }}
{%- else %}
storageclassannotation: {}
{%- endif %}


enablestorage: {{ enablestorage }}
datasize: {{ datasize }}Gi

global:
  {%- if imagePullSecrets is defined and imagePullSecrets|length > 0 %}
  imagePullSecrets:
  {%- for imagePullSecret in imagePullSecrets %}
    - {{ imagePullSecret }}
  {%- endfor %}
  {%- else %}
  imagePullSecrets: []
  {%- endif %}

image:
  registry: "{{ registry }}"
  repository: "{{ repository }}"
  pullPolicy: "{{ pullpolicy }}"
  tag: "{{ tag }}"
  pullSecrets: []

{%- if commonLabels is defined and commonLabels|length > 0 %}
commonLabels:
{%- for commonLabel in commonLabels %}
  {{ commonLabel.name }}: "{{ commonLabel.value }}"
{%- endfor %}
{%- else %}
commonLabels: {}
{%- endif %}

{%- if commonAnnotations is defined and commonAnnotations|length > 0 %}
commonAnnotations:
{%- for commonAnnotation in commonAnnotations %}
  {{ commonAnnotation.name }}: "{{ commonAnnotation.value }}"
{%- endfor %}
{%- else %}
commonAnnotations: {}
{%- endif %}

{%- if podLabels is defined and podLabels|length > 0 %}
podLabels:
{%- for podLabel in podLabels %}
  {{ podLabel.name }}: "{{ podLabel.value }}"
{%- endfor %}
{%- else %}
podLabels: {}
{%- endif %}

{%- if podAnnotations is defined and podAnnotations|length > 0 %}
podAnnotations:
{%- for podAnnotation in podAnnotations %}
  {{ podAnnotation.name }}: "{{ podAnnotation.value }}"
{%- endfor %}
{%- else %}
podAnnotations: {}
{%- endif %}


{%- if securityContext is defined and securityContext|length > 0 %}
securityContext:
{%- for item in securityContext %}
  {{ item.name }}: {{ item.value }}
{%- endfor %}
{%- else %}
securityContext: {}
{%- endif %}

diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity

containerSecurityContext:
  enabled: true
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: {{ runasuser }}
  allowPrivilegeEscalation: false
  seccompProfile:
    type: RuntimeDefault
  capabilities:
    drop: ["ALL"]   

podSecurityContext:
  enabled: true
  runAsNonRoot: true
  runAsUser: {{ runasuser }}
  fsGroup: {{ runasuser }}

hostNetwork: false

{%- if dnsConfig is defined %}
dnsConfig:
{{ dnsConfig|indent(2, True) }}
{%- else %}
dnsConfig: []
{%- endif %}

{%- if hostAliases is defined %}
hostAliases:
{{ hostAliases|indent(2, True) }}
{%- else %}
hostAliases: []
{%- endif %}

nodeSelector: {}

tolerations: []

affinity: {}

topologySpreadConstraints: []

priorityClassName: "{{ priorityclassname }}"

schedulerName: "{{ kubeschedulername }}"


updateStrategy:
  type: RollingUpdate


terminationGracePeriodSeconds: ""

serviceAccount:
  enabled: true
  create: {{ specifyserviceaccount }}
  name: "{{ servicecaccount }}"
  {%- if podAnnotations is defined and podAnnotations|length > 0 %}
  annotations:
  {%- for podAnnotation in podAnnotations %}
    {{ podAnnotation.name }}: "{{ podAnnotation.value }}"
  {%- endfor %}
  {%- else %}
  annotations: {}
  {%- endif %}
  automountServiceAccountToken: true  

security:
  ssl:
    enabled: false
    autoGenerated: false

tlsingress:
  ssl:
    enabled: {{ enableingresstls}}
    autoGenerated: {{ enableingresstls}}

service:
  type: ClusterIP

resources:
  limits: 
    memory: {{ limitmem }}{{ unitlimitmem }}
    cpu: {{ limitcpu }}{% if unitlimitcpu == "m" %}m{% endif %}
  requests:
    memory: {{ requestmem }}{{ unitrequestmem }}
    cpu: {{ requestcpu }}{% if unitrequestcpu == "m" %}m{% endif %}

command:
  - sh
  - -c
  - |
    {%- if additionalCertificate  %}
    cp $JAVA_HOME/lib/security/cacerts /opt/finalcacert/cacerts
    chmod 777 /opt/finalcacert/cacerts    
    {%- for cert in additionalCertificate %}
    keytool -import -noprompt -trustcacerts -alias {{cert.name}} -file /opt/addcert/{{cert.name}} -keystore /opt/finalcacert/cacerts -storepass changeit
    {%- endfor %}
    {%- endif %}
    mkdir /home/test
    cd /home/test
    cp /tmp/examples/spark_application.ipynb /home/test/spark_application.ipynb
    jupyter nbextension install sparkmonitor --py
    jupyter nbextension enable  sparkmonitor --py    
    ipython profile create
    echo "c.InteractiveShellApp.extensions.append('sparkmonitor.kernelextension')" >>  $(ipython profile locate default)/ipython_kernel_config.py
    #echo "c.IPKernelApp.capture_fd_output = False" >>  $(ipython profile locate default)/ipython_kernel_config.py
    #jupyter notebook --NotebookApp.token='' --NotebookApp.port=8888 --NotebookApp.ip='0.0.0.0' --NotebookApp.open_browser=False --NotebookApp.base_project_url='/{{ name }}' --NotebookApp.shutdown_no_activity_timeout=60 --MappingKernelManager.cull_idle_timeout=60 --MappingKernelManager.cull_interval=30 --MappingKernelManager.cull_connected=True
    jupyter notebook --NotebookApp.token='' --NotebookApp.port=8888 --NotebookApp.ip='0.0.0.0' --NotebookApp.open_browser=False --NotebookApp.base_project_url='/{{ name }}'
args: []

env: []
extraVolumeMounts: []
extraVolumes: []
pvctemplate:
  - name: notebook-data
    size: {{ datasize }}Gi

ingress:
  enabled: {{ enableingress }}
  {%- if ingressnumber %}
  ingresstype: 4040
  {%- else %}
  ingresstype: http
  {%- endif %}
  pathType: ImplementationSpecific
  apiVersion: ""
  hostname: {{ ingresshostname }}
  ingressClassName: ""
  path: /{{ name }}
  className: ""
  {%- if nginxannotation is defined and nginxannotation|length > 0 %}
  annotations:
{{ nginxannotation|indent(4, True) }}
    {%- if enableingresstls %}
    #route.openshift.io/termination: passthrough
    #nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    #nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    {%- endif %}
  {%- else %}
  annotations: {}
  {%- endif %}
  tls: {{ enableingresstls }}
  selfSigned: {{ enableingresstls }}
  extraHosts: []
  extraPaths: []
  secrets: []
  extraRules: []

sparkinitimage: {{ sparkinitimage }}
enablehadoop: {{ enablehadoop }}
enablekerberos: {{ enablekerberos }}
enablekeytab: {{ enablekeytab }}

{%- if additionalCertificate is defined and additionalCertificate|length > 0 %}
additionalCertificate:
{%- for certificate in additionalCertificate %}
  {{ certificate.name }}: |-
{{ certificate.content|indent(4, True) }} 
{%- endfor %}
{%- else %}
additionalCertificate: {}
{%- endif %}
{%- endif %}

coresite: |
{{ coresite|indent(2, True)}}
hdfssite: |
{{ hdfssite|indent(2, True)}}
hivesite: |
{{ hdfssite|indent(2, True)}}
kerberos: |
{{ kerberos|indent(2, True)}}

{%- if attachedkeytabs is defined and attachedkeytabs|length > 0 %}
keytabs:
{%- for attachedkeytab in attachedkeytabs %}
  {{ attachedkeytab.name }}: |-
{{ attachedkeytab.content|indent(4, True) }} 
{%- endfor %}
{%- else %}
keytabs: {}
{%- endif %}
{%- endif %}