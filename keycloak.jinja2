name: "{{ name }}"
nameOverride: "{{ nameOverride }}"
fullnameOverride: "{{ fullnameOverride }}"
namespaceOverride: "{{ namespace }}"
schedulerName: "{{ kubeschedulername }}"

replicaCount: {{ replicaCount }}
production: {{ enableha }}
httpRelativePath: "/{{ name }}"
importrealm: {{ importrealm }}
defaultrealm: "{{ realm }}"
enablepasswd: {{ enablepasswd }}
runasuser: "{{ runasuser }}"

global:
  imageRegistry: ""
  {%- if imagePullSecrets is defined and imagePullSecrets|length > 0 %}
  imagePullSecrets:
  {%- for imagePullSecret in imagePullSecrets %}
    - {{ imagePullSecret }}
  {%- endfor %}
  {%- else %}
  imagePullSecrets: []
  {%- endif %}
  storageClass: ""

{%- if commonLabels is defined and commonLabels|length > 0 %}
commonLabels:
{%- for commonLabel in commonLabels %}
  {{ commonLabel.name }}: "{{ commonLabel.value }}"
{%- endfor %}
{%- else %}
commonLabels: {}
{%- endif %}

{%- if commonAnnotations is defined and commonAnnotations|length > 0 %}
commonAnnotations:
{%- for commonAnnotation in commonAnnotations %}
  {{ commonAnnotation.name }}: "{{ commonAnnotation.value }}"
{%- endfor %}
{%- else %}
commonAnnotations: {}
{%- endif %}

{%- if podLabels is defined and podLabels|length > 0 %}
podLabels:
{%- for podLabel in podLabels %}
  {{ podLabel.name }}: "{{ podLabel.value }}"
{%- endfor %}
{%- else %}
podLabels: {}
{%- endif %}

{%- if podAnnotations is defined and podAnnotations|length > 0 %}
podAnnotations:
{%- for podAnnotation in podAnnotations %}
  {{ podAnnotation.name }}: "{{ podAnnotation.value }}"
{%- endfor %}
{%- else %}
podAnnotations: {}
{%- endif %}

{%- if dnsConfig is defined %}
dnsConfig:
{{ dnsConfig|indent(2, True) }}
{%- else %}
dnsConfig: []
{%- endif %}

{%- if hostAliases is defined %}
hostAliases:
{{ hostAliases|indent(2, True) }}
{%- else %}
hostAliases: []
{%- endif %}


resources:
  limits: 
    memory: {{ limitmem }}{{unitlimitmem}}
    cpu: {{ limitcpu }}{% if unitlimitcpu == "m" %}m{% endif %}
  requests:
    memory: {{ requestmem }}{{unitrequestmem}}
    cpu: {{ requestcpu }}{% if unitrequestcpu == "m" %}m{% endif %}

serviceAccount:
  enabled: true
  create: {{ specifyserviceaccount }}
  name: "{{ servicecaccount }}"
  {%- if podAnnotations is defined and podAnnotations|length > 0 %}
  annotations:
  {%- for podAnnotation in podAnnotations %}
    {{ podAnnotation.name }}: "{{ podAnnotation.value }}"
  {%- endfor %}
  {%- else %}
  annotations: {}
  {%- endif %}
  automountServiceAccountToken: true  

image:
  registry: "{{ registry }}"
  repository: "{{ repository }}"
  tag: "{{ tag }}"
  digest: ""
  pullPolicy: "{{ pullpolicy }}"
  pullSecrets: []
  debug: false

livenessProbe:
  enabled: true
  initialDelaySeconds: 300
  periodSeconds: 1
  timeoutSeconds: 5
  failureThreshold: 3
  successThreshold: 1

readinessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 3
  successThreshold: 1

startupProbe:
  enabled: false
  initialDelaySeconds: 30
  periodSeconds: 5
  timeoutSeconds: 1
  failureThreshold: 60
  successThreshold: 1  

containerSecurityContext:
  enabled: true
  runAsNonRoot: true
  runAsUser: {{ runasuser }}
  allowPrivilegeEscalation: false
  seccompProfile:
    type: RuntimeDefault
  capabilities:
    drop: ["ALL"]   

podSecurityContext:
  enabled: true
  runAsNonRoot: true
  runAsUser: {{ runasuser }}
  fsGroup: {{ runasuser }}

auth:
  adminUser: "{{ adminUsername }}"
  adminPassword: "{{ adminPassword }}"

tls:
  enabled: {{ enabletls }}
  autoGenerated: false
  existingSecret: "dcp-secret-{{ name }}"
  usePem: true
  truststoreFilename: "keycloak.truststore.jks"
  keystoreFilename: "keycloak.keystore.jks"
  keystorePassword: ""
  truststorePassword: ""
  passwordsSecret: ""

spi:
  existingSecret: "{{ spisecret }}"
  truststorePassword: "{{ spipassword }}"
  truststoreFilename: "keycloak-spi.truststore.jks"
  passwordsSecret: ""
  hostnameVerificationPolicy: "ANY"  

extraEnvVars:
  - name: KEYCLOAK_LOG_LEVEL
    value: DEBUG
  - name: JAVA_OPTS
    value: "-server -Xms2048m -Xmx6144m -XX:MetaspaceSize=96m -XX:MaxMetaspaceSize=256m -Djava.net.preferIPv4Stack=true -Djboss.modules.system.pkgs=org.jbos.byteman -Djava.awt.headlesss=true"
  {%- if importrealm %}
  {%- if not usekeycloakcli %}
  {%- if dcpKeycloakInitRealms|length > 0 %}
  - name: KEYCLOAK_EXTRA_ARGS
    value: "-Dkeycloak.import=/config/ -Dkeycloak.migration.strategy=OVERWRITE_EXISTING"
  {%- endif %}
  {%- endif %}
  {%- endif %}
  - name: KEYCLOAK_EXTRA_ARGS_PREPENDED
    value: "--spi-login-protocol-openid-connect-legacy-logout-redirect-uri=true"

extraVolumes:
  - name: binairies
    emptyDir: {}
  - name: tmp
    emptyDir: {}
  {%- if importrealm %}
  {%- if not usekeycloakcli %}  
  {%- if dcpKeycloakInitRealms|length > 0 %}
  - name: config
    configMap:
      name: {{ name }}-{{ nameOverride }}-realm-cm
      items:
      - key: "realm.json"
        path: "realm.json"
  {%- endif %}
  {%- endif %}
  {%- endif %}
  {%- if enablepasswd %}
  - name: passwd
    configMap:
      name: {{ name }}-{{ nameOverride }}-passwd-cm
  {%- endif %}

extraVolumeMounts:
  - name: binairies
    mountPath: /opt/bitnami
  - name: tmp
    mountPath: /tmp
  {%- if importrealm %}
  {%- if not usekeycloakcli %}
  {%- if dcpKeycloakInitRealms|length > 0 %}
  - name: config
    mountPath: "/config"
    readOnly: true
  {%- endif %}
  {%- endif %}
  {%- endif %}
  {%- if enablepasswd %}
  - name: passwd
    mountPath: /etc/passwd
    subPath: passwd
  {%- endif %}

diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity

command:
  - bash
  - -c
  - |
    cp -R /opt/dsp/common /opt/bitnami
    mkdir -p /opt/bitnami/java/bin
    ln -s /opt/dsp/java/bin/java  /opt/bitnami/java/bin/java
    cp -R /opt/dsp/keycloak /opt/bitnami/
    cp -R /opt/dsp/scripts /opt/bitnami/
    {%- if enabletls %}
    mkdir /opt/bitnami/keycloak/certs
    cp /opt/certs/* /opt/bitnami/keycloak/certs/
    mkdir /opt/bitnami/keycloak/spi-certs
    cp /opt/spi-certs/* /opt/bitnami/keycloak/spi-certs/
    {%- endif %}
    chmod 777 /opt/bitnami/*
    chmod -R 777 /opt/bitnami/*
    export BITNAMI_APP_NAME="keycloak"
    export JAVA_HOME="/opt/dsp/java"
    export PATH="/opt/bitnami/common/bin:/opt/dsp/java/bin:/opt/bitnami/keycloak/bin:$PATH"
    /opt/bitnami/scripts/keycloak/entrypoint.sh /opt/bitnami/scripts/keycloak/run.sh
  
pdb:
  create: {{ enablepdb }}
  minAvailable: {{ minavailable }}
  maxUnavailable: ""

clientcount: {{dcpKeycloakInitRealms|length}}
clients:
{%- for dcpKeycloakInitRealm in dcpKeycloakInitRealms %}
  {{ dcpKeycloakInitRealm.key }}:
    realm: {{ dcpKeycloakInitRealm.realm }}
    clientid: {{ dcpKeycloakInitRealm.clientid }}
    clientsecret: {{ dcpKeycloakInitRealm.clientsecret }}
    clientscope: {{ dcpKeycloakInitRealm.clientscopeid }}
    rooturl: {{ dcpKeycloakInitRealm.rootUrl }}
    roles:      
      {%- if dcpKeycloakInitRealm.clientroles is defined and dcpKeycloakInitRealm.clientroles|length > 0 %}
      {%- for role in dcpKeycloakInitRealm.clientroles %}
      - {{ role.name }}
      {%- endfor %}
      {%- else %}  
      - {{ dcpKeycloakInitRealm.clientid }}
      {%- endif %}
{%- endfor %}

autoscaling:
  enabled: {{ enableautoscaling }}
  minReplicas: {{ minreplicas }}
  maxReplicas: {{ maxreplicas }}
  targetCPU: "{{ targetcpu }}"
  targetMemory: "{{ targetmemory }}"

openshift:
  enabled: {{ enableroute }}
  externalSecure: {{ externalSecure }}
  route:
    host: {{ ingresshostname }}
    path: {{ openshiftpath }}
    targetPort: {{ targetPort }}
    insecureEdgeTerminationPolicy: {{ insecureEdgeTerminationPolicy }}

ingress:
  enabled: {{ not enableroute }}
  {%- if ingressnumber %}
  {%- if enabletls %}
  ingresstype: 443
  {%- else %}
  ingresstype: 80
  {%- endif %}

  {%- else %}
  
  {%- if enabletls %} 
  {%- if isopenshift %} 
  ingresstype: http
  {%- else %}
  ingresstype: https
  {%- endif %}
  {%- else %}
  ingresstype: http
  {%- endif %}

  {%- endif %}
  ingressClassName: ""
  pathType: ImplementationSpecific
  apiVersion: ""
  hostname: {{ ingresshostname }}
  path: /{{ name }}
  isopenshift: {{ isopenshift }}
  {%- if isopenshift %} 
  servicePort: http
  {%- else %}
  servicePort: https
  {%- endif %}
  {%- if nginxannotation is defined %}
  annotations:
{{ nginxannotation|indent(4, True) }}
    {%- if enableingresstls %}
    #route.openshift.io/termination: passthrough
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    {%- endif %}
  {%- else %}
  annotations: {}
  {%- endif %}
  labels: {}
  tls: {{ enabletls }}
  selfSigned: false
  extraHosts: []
  extraPaths: []
  extraTls:
    - hosts:
        - {{ ingresshostname }}
      secretName: dcp-secret-{{ name }}
  secrets: []
  extraRules: []



{%- if usekeycloakcli %}
keycloakConfigCli:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/keycloak-config-cli
    tag: 5.8.0-debian-11-r0
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  annotations:
    helm.sh/hook: "post-install,post-upgrade,post-rollback"
    helm.sh/hook-delete-policy: "hook-succeeded,before-hook-creation"
    helm.sh/hook-weight: "5"
  command: []
  args: []
  hostAliases: []
  resources:
    limits: {}
    requests: {}
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  backoffLimit: 1
  podLabels: {}
  podAnnotations: {}
  nodeSelector: {}
  podTolerations: []
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumes: []
  extraVolumeMounts: []
  initContainers: []
  sidecars: []
  configuration:
    realm1.json: |
        {
          "realm": "realm1",
          "clients": []
        }
  existingConfigmap: ""
  cleanupAfterFinished:
    enabled: false
    seconds: 600
{%- endif %}    

externalDatabase:
  host: {{name}}-{{nameOverride}}pgs{% if architecture == 'replication' %}-primary{% endif %}.{{namespace}}.{{clusterDomain}}
  port: {{portpgs}}
  user: "{{ dbuser }}"
  database: "{{ dbname }}"
  password: "{{ dbpassword }}"
  existingSecret: ""

postgresql:
  enabled: true
  nameOverride: "{{nameOverride}}pgs"
  fullnameOverride: ""
  architecture: {{ architecture }}  
  diagnosticMode:
    enabled: false


  {%- if podLabels is defined and podLabels|length > 0 %}
  commonLabels:
  {%- for podLabel in podLabels %}
    {{ podLabel.name }}: {{ podLabel.value }}
  {%- endfor %}
  {%- else %}
  commonLabels: {}
  {%- endif %}

  {%- if commonAnnotations is defined and commonAnnotations|length > 0 %}
  commonAnnotations:
  {%- for commonAnnotation in commonAnnotations %}
    {{ commonAnnotation.name }}: {{ commonAnnotation.value }}
  {%- endfor %}
  {%- else %}
  commonAnnotations: {}
  {%- endif %}

  {%- if podAnnotations is defined and podAnnotations|length > 0 %}
  podAnnotations:
  {%- for podAnnotation in podAnnotations %}
      {{ podAnnotation.name }}: "{{ podAnnotation.value }}"
  {%- endfor %}
  {%- else %}
  podAnnotations: {}
  {%- endif %}

  auth:
    postgresPassword: "{{ dbrootpassword }}"
    username: "{{ dbuser }}"
    password: "{{ dbpassword }}"
    database: "{{ dbname }}"

  volumePermissions:
    enabled: false
    securityContext:
      runAsUser: "auto"

  shmVolume:
    chmod:
      enabled: false  
  
  image:
    registry: {{ pgsregistry }}
    repository: {{ pgsrepository }}
    tag: {{ pgstag }}
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []

  containerPorts:
    postgresql: {{portpgs}}

  global:
    {%- if imagePullSecrets is defined and imagePullSecrets|length > 0 %}
    imagePullSecrets:
    {%- for imagePullSecret in imagePullSecrets %}
      - {{ imagePullSecret }}
    {%- endfor %}
    {%- else %}
    imagePullSecrets: []
    {%- endif %}  
    storageClass: {{ storageClassName }}

  primary:

    schedulerName: "{{ kubeschedulername }}"

    podSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: {{ runasuser }}
      fsGroup: {{ runasuser }}

    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: {{runasuser}}
      runAsGroup: {{runasuser}}
      allowPrivilegeEscalation: false
      seccompProfile:
        type: RuntimeDefault
        #localhostProfile: 
      capabilities:
        drop: ["ALL"]

    extraVolumeMounts:
      # if readonly filesystem
      - name: dcp-conf
        mountPath: /opt/bitnami
      {%- if not dbpersist %}
      # If persistence is disabled
      - name: dcp-data
        mountPath: /bitnami/postgresql
      {%- endif %}
      - name: dcp-tmp
        mountPath: /tmp
    extraVolumes:
      # if readonly filesystem
      - name: dcp-conf
        emptyDir: {}
      {%- if not dbpersist %}
      # If persistence is disabled
      - name: dcp-data
        emptyDir: {}
      {%- endif %}
      - name: dcp-tmp
        emptyDir: {}
    command:
      - bash
      - -c
      - |
        cp -R /opt/dsp/postgresql /opt/bitnami
        cp -R /opt/dsp/licenses /opt/bitnami
        cp -R /opt/dsp/scripts /opt/bitnami
        cp -R /opt/dsp/common /opt/bitnami

        chmod 777 "/opt/bitnami/*"
        chmod -R 777 "/opt/bitnami/*"

        /opt/bitnami/scripts/postgresql/postunpack.sh
        /opt/bitnami/scripts/locales/add-extra-locales.sh

        export APP_VERSION="15.4.0"
        export BITNAMI_APP_NAME="postgresql"
        export LANG="en_US.UTF-8"
        export LANGUAGE="en_US:en"
        export NSS_WRAPPER_LIB="/opt/bitnami/common/lib/libnss_wrapper.so"
        export PATH="/opt/bitnami/postgresql/bin:$PATH"

        # if persistence is disabled
        {%- if not dbpersist %}
        mkdir /bitnami/postgresql/data
        {%- endif %}

        /opt/bitnami/scripts/postgresql/entrypoint.sh /opt/bitnami/scripts/postgresql/run.sh

    persistence:
      enabled: {{ dbpersist }}
      storageClass: {{ storageClassName }}
      size: {{ dbsize }}Mi
      labels: 
        {%- if podLabels is defined and podLabels|length > 0 %}
        {%- for podLabel in podLabels %}
        {{ podLabel.name }}: "{{ podLabel.value }}"
        {%- endfor %}
        {%- else %}
        release: {{ nameOverride }}
        {%- endif %}
    resources:
      limits: 
        memory: {{ limitmempgs }}{{unitlimitmempgs}}
        cpu: {{ limitcpupgs }}{% if unitlimitcpupgs == "m" %}m{% endif %}
      requests:
        memory: {{ requestmempgs }}{{unitrequestmempgs}}
        cpu: {{ requestcpupgs }}{% if unitrequestcpupgs == "m" %}m{% endif %}

  readReplicas:
    name: read
    replicaCount: {{ readreplicas }}
    schedulerName: "{{ kubeschedulername }}"
    podSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: {{ runasuser }}
      fsGroup: {{ runasuser }}

    containerSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: {{runasuser}}
      allowPrivilegeEscalation: false
      seccompProfile:
        type: RuntimeDefault
        #localhostProfile: 
      capabilities:
        drop: ["ALL"]

    extraVolumeMounts:
      # if readonly filesystem
      - name: dcp-conf
        mountPath: /opt/bitnami
      {%- if not dbpersist %}
      # If persistence is disabled
      - name: dcp-data
        mountPath: /bitnami/postgresql
      {%- endif %}
      - name: dcp-tmp
        mountPath: /tmp
    extraVolumes:
      # if readonly filesystem
      - name: dcp-conf
        emptyDir: {}
      {%- if not dbpersist %}
      # If persistence is disabled
      - name: dcp-data
        emptyDir: {}
      {%- endif %}
      - name: dcp-tmp
        emptyDir: {}

    command:
      - bash
      - -c
      - |
        cp -R /opt/dsp/postgresql /opt/bitnami
        cp -R /opt/dsp/licenses /opt/bitnami
        cp -R /opt/dsp/scripts /opt/bitnami
        cp -R /opt/dsp/common /opt/bitnami

        chmod 777 "/opt/bitnami/*"
        chmod -R 777 "/opt/bitnami/*"

        /opt/bitnami/scripts/postgresql/postunpack.sh
        /opt/bitnami/scripts/locales/add-extra-locales.sh

        export APP_VERSION="15.4.0"
        export BITNAMI_APP_NAME="postgresql"
        export LANG="en_US.UTF-8"
        export LANGUAGE="en_US:en"
        export NSS_WRAPPER_LIB="/opt/bitnami/common/lib/libnss_wrapper.so"
        export PATH="/opt/bitnami/postgresql/bin:$PATH"

        # if persistence is disabled
        {%- if not dbpersist %}
        mkdir /bitnami/postgresql/data
        {%- endif %}

        /opt/bitnami/scripts/postgresql/entrypoint.sh /opt/bitnami/scripts/postgresql/run.sh

    persistence:
      enabled: {{ dbpersist }}
      storageClass: {{ storageClassName }}
      size: {{ dbsize }}Mi
      labels: 
        {%- if podLabels is defined and podLabels|length > 0 %}
        {%- for podLabel in podLabels %}
        {{ podLabel.name }}: "{{ podLabel.value }}"
        {%- endfor %}
        {%- else %}
        release: {{ nameOverride }}
        {%- endif %}
    resources:
      limits: 
        memory: {{ limitmempgs }}{{unitlimitmempgs}}
        cpu: {{ limitcpupgs }}{% if unitlimitcpupgs == "m" %}m{% endif %}
      requests:
        memory: {{ requestmempgs }}{{unitrequestmempgs}}
        cpu: {{ requestcpupgs }}{% if unitrequestcpupgs == "m" %}m{% endif %}   

certificate: |-
{{ certificate|indent(4, True) }}
key: |-
{{ key|indent(4, True) }}