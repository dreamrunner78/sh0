name: "{{ name }}"
nameOverride: "{{ nameOverride }}"
fullnameOverride: "{{ fullnameOverride }}"
namespaceOverride: "{{ namespace }}"
namespace: "{{ namespace }}"
runasuser: "{{ runasuser }}"

clusterDomain: "{{ clusterDomain }}"

storageClassName: "{{ storageClassName }}"
{%- if storageclassannotation is defined %}
storageclassannotation:
{{ storageclassannotation|indent(2, True) }}
{%- else %}
storageclassannotation: {}
{%- endif %}

enablepasswd: {{ enablepasswd }}
enableingresstls: {{ enableingresstls }}
usedcpingress: {{usedcpingress}}
enableauthent: {{enableauthent}}
enablemonitoring: "{{ enablemonitoring }}"

global:
  {%- if imagePullSecrets is defined and imagePullSecrets|length > 0 %}
  imagePullSecrets:
  {%- for imagePullSecret in imagePullSecrets %}
    - {{ imagePullSecret }}
  {%- endfor %}
  {%- else %}
  imagePullSecrets: []
  {%- endif %}

{%- if commonLabels is defined and commonLabels|length > 0 %}
commonLabels:
{%- for commonLabel in commonLabels %}
  {{ commonLabel.name }}: "{{ commonLabel.value }}"
{%- endfor %}
{%- else %}
commonLabels: {}
{%- endif %}

{%- if commonAnnotations is defined and commonAnnotations|length > 0 %}
commonAnnotations:
{%- for commonAnnotation in commonAnnotations %}
  {{ commonAnnotation.name }}: "{{ commonAnnotation.value }}"
{%- endfor %}
{%- else %}
commonAnnotations: {}
{%- endif %}

{%- if podLabels is defined and podLabels|length > 0 %}
podLabels:
{%- for podLabel in podLabels %}
  {{ podLabel.name }}: "{{ podLabel.value }}"
{%- endfor %}
{%- else %}
podLabels: {}
{%- endif %}

{%- if podAnnotations is defined and podAnnotations|length > 0 %}
podAnnotations:
{%- for podAnnotation in podAnnotations %}
  {{ podAnnotation.name }}: "{{ podAnnotation.value }}"
{%- endfor %}
{%- else %}
podAnnotations: {}
{%- endif %}

containerSecurityContext:
  enabled: true
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: {{ runasuser }}
  allowPrivilegeEscalation: false
  seccompProfile:
    type: RuntimeDefault
  capabilities:
    drop: ["ALL"]

podSecurityContext:
  enabled: true
  runAsNonRoot: true
  runAsUser: {{ runasuser }}
  fsGroup: {{ runasuser }}

hostNetwork: null

{%- if dnsConfig is defined %}
dnsConfig:
{{ dnsConfig|indent(2, True) }}
{%- else %}
dnsConfig: []
{%- endif %}

{%- if hostAliases is defined %}
hostAliases:
{{ hostAliases|indent(2, True) }}
{%- else %}
hostAliases: []
{%- endif %}

nodeSelector: {}

tolerations: []

affinity: {}

topologySpreadConstraints: []

priorityClassName: "{{ priorityclassname }}"

schedulerName: "{{ kubeschedulername }}"

updateStrategy:
  type: RollingUpdate


terminationGracePeriodSeconds: ""

diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity

dcp:
  path: {%- if usedcpingress %} /{{ name }}{%- else %} /{%- endif %}

podManagementPolicy: Parallel

serviceAccount:
  enabled: true
  create: {{ specifyserviceaccount }}
  name: "{{ servicecaccount }}"
  {%- if podAnnotations is defined and podAnnotations|length > 0 %}
  annotations:
  {%- for podAnnotation in podAnnotations %}
    {{ podAnnotation.name }}: "{{ podAnnotation.value }}"
  {%- endfor %}
  {%- else %}
  annotations: {}
  {%- endif %}
  automountServiceAccountToken: true  

# Number of nifi nodes
replicaCount: {{ replicaCount }}
maxreplicaCount: {{ maxreplicaCount }}

image:
  registry: "{{ registry }}"
  repository: "{{ repository }}"
  tag: "{{ tag }}"
  pullPolicy: "{{ pullpolicy }}"


security:
  ssl:
    enabled: {{ enabletls }}
    autoGenerated: false
    image: {{ initimage }}
    keystorepath: /opt/dcp/keystore/dcp-keystore.jks
    keystorePassword: {{ keystorePassword }}
    truststorepath: /opt/dcp/keystore/dcp-truststore.jks
    truststorePassword: {{ keystorePassword }}    

sts:
  command:
    - sh
    - -c
    - /opt/nifi/nifi-current/start.sh
  args: []    
  AntiAffinity: {{ antiAffinity }}
  hostPort: null
  pod:
    annotations:
      security.alpha.kubernetes.io/sysctls: net.ipv4.ip_local_port_range=10000 65000
      #prometheus.io/scrape: "true"

  startupProbe:
    enabled: false
    failureThreshold: 60
    periodSeconds: 10

properties:
  needClientAuth: false
  sensitiveKey: {{ sensitiveKey }}
  algorithm: NIFI_PBKDF2_AES_GCM_256
  externalSecure: false
  isNode: {{ enableha }}
  httpsPort: 8443
  webProxyHost: {{ ingresshostname }}:443,{{ ingresshostname }}:80
  clusterPort: 6007
  provenanceStorage: "{{ provenanceRepoStorage }}GB"
  siteToSite:
    port: 10000
  safetyValve:
    nifi.web.http.network.interface.default: eth0
    nifi.web.http.network.interface.lo: lo
    {%- if usedcpingress %}
    nifi.web.proxy.context.path: /{{name}}, /{{ name }}/nifi
    {%- endif %}

  ## Include aditional processors
  # customLibPath: "/opt/configuration_resources/custom_lib"

# Nifi User Authentication
auth:
  dcpidentity: "OU=NIFI, O=ABE, L=PARIS, ST=IDF, C=FR"
  subj: /C=FR/ST=IDF/L=PARIS/O=ABE/OU=NIFI
  #admin: cn=bassim,ou=Users,dc=example,dc=org
  admin: {{ finaladminidentity }}
  
  singleUser:
    enabled: {{ enablesingleuser }}
    username: {{ username }}
    password: {{ password }}

  clientAuth:
    enabled: false

  ldap:
    enabled: {{ enableldap }}
    host: {{ldapurl}}
    searchBase: {{ ldapSearchBase }}
    admin: {{ ldapAdmin }}
    pass: {{ ldapAminPassword }}
    searchFilter: {{ ldapSearchFilter }}
    userIdentityAttribute: {{ ldapUserIdentityAttribute }}
    authStrategy: {{ ldapAuthStrategy }} # How the connection to the LDAP server is authenticated. Possible values are ANONYMOUS, SIMPLE, LDAPS, or START_TLS.
    identityStrategy: {{ lapIdentityStrategy }}
    authExpiration: 12 hours
    userSearchScope: {{ lapUserSearchScope }} # Search scope for searching users (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching users.
    groupSearchScope: {{ lapUserGroupSearchScope }} # Search scope for searching groups (ONE_LEVEL, OBJECT, or SUBTREE). Required if searching groups.
    adminUser: cn=bassim,ou=Users,dc=example,dc=org

  oidc:
    enabled: {{ enableoidc }}
    discoveryUrl: {{ ingressUrl }}/realms/{{ realm }}/.well-known/openid-configuration
    clientId: {{ name }}
    clientSecret: {{ clientsecret }}
    claimIdentifyingUser: preferred_username
    admin: {{ finaladminidentity }}
    ## Request additional scopes, for example profile
    additionalScopes: profile

# ui service
service:
  type: ClusterIP
  httpsPort: 8443  
  annotations: {}

  # Enables additional port/ports to nifi service for internal processors
  processors:
    enabled: false
    ports:
      - name: processor01
        port: 7001
        targetPort: 7001
        #nodePort: 30701
      - name: processor02
        port: 7002
        targetPort: 7002
        #nodePort: 30702  

# headless service
headless:
  type: ClusterIP
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"

# Configure metrics
metrics:
  prometheus:
    # Enable Prometheus metrics
    enabled: false
    # Port used to expose Prometheus metrics
    port: 9092
    serviceMonitor:
      # Enable deployment of Prometheus Operator ServiceMonitor resource
      enabled: false
      # namespace: monitoring
      # Additional labels for the ServiceMonitor
      labels: {}


# Amount of memory to give the NiFi java heap
jvmMemory: {{jvmMemory}}g

# Separate image for tailing each log separately and checking zookeeper connectivity
sidecar:
  registry: docker.io
  repository:
  image: busybox
  tag: "1.32.0"
  imagePullPolicy: "IfNotPresent"

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  enabled: {{ persistdata }}
  {%- if podLabels is defined and podLabels|length > 0 %}
  labels:
  {%- for podLabel in podLabels %}
    {{ podLabel.name }}: "{{ podLabel.value }}"
  {%- endfor %}
  {%- else %}
  labels: {}
  {%- endif %}
  

  accessModes:  [ReadWriteOnce]
  ## Storage Capacities for persistent volumes
  configStorage:
    size: {{ configStorage }}Mi
  authconfStorage:
    size: {{ authconfStorage  }}Mi
  # Storage capacity for the 'data' directory, which is used to hold things such as the flow.xml.gz, configuration, state, etc.
  dataStorage:
    size: {{ dataStorage }}Gi
  # Storage capacity for the FlowFile repository
  flowfileRepoStorage:
    size: {{ flowfileRepoStorage }}Gi
  # Storage capacity for the Content repository
  contentRepoStorage:
    size: {{ contentRepoStorage }}Gi
  # Storage capacity for the Provenance repository. When changing this, one should also change the properties.provenanceStorage value above, also.
  provenanceRepoStorage:
    size: {{ provenanceRepoStorage }}Gi
  # Storage capacity for nifi logs
  logStorage:
    size: {{ logStorage }}Gi

resources:
  requests:
    memory: {{ requestmem }}{{unitnifirequestmem}}
    cpu: {{ requestcpu }}{% if unitnifirequestcpu == "m" %}m{% endif %}
  limits: 
    memory: {{ limitmem }}{{unitnifilimitmem}}
    cpu: {{ limitcpu }}{% if unitnifilimitcpu == "m" %}m{% endif %}

logresources:
  requests:
    cpu: 10m
    memory: 10Mi
  limits:
    cpu: 50m
    memory: 50Mi

## Enables setting your own affinity. Mutually exclusive with sts.AntiAffinity
## You need to set the value of sts.AntiAffinity other than "soft" and "hard"

initContainers: {}

extraVolumeMounts:
  - name: tmp
    mountPath: /tmp
  - name: work
    mountPath: /opt/nifi/nifi-current/work
  - name: run
    mountPath: /opt/nifi/nifi-current/run
  - name: conf
    mountPath: /opt/nifi/nifi-current/conf

extraVolumes:
  - name: run
    emptyDir: {}
  - name: work
    emptyDir: {}    
  - name: tmp
    emptyDir: {}
  - name: conf
    emptyDir: {}

## Extra containers
extraContainers: []

## Extra environment variables that will be pass onto deployment pods
env: []

## Extra environment variables from secrets and config maps
#envFrom: []

envFrom: []
  # - configMapRef:
  #     name: config-name
  # - secretRef:
  #     name: mysecret

## Openshift support
## Use the following varables in order to enable Route and Security Context Constraint creation
openshift:
  scc:
    enabled: false
  route:
    enabled: false
    #host: www.test.com
    #path: /nifi

# ca server details
# Setting this true would create a nifi-toolkit based ca server
# The ca server will be used to generate self-signed certificates required setting up secured cluster
ca:
  ## If true, enable the nifi-toolkit certificate authority
  enabled: false
  persistence:
    enabled: true
  server: ""
  service:
    port: 9090
  token: sixteenCharacters
  admin:
    cn: admin
  serviceAccount:
    create: false
    #name: nifi-ca
  openshift:
    scc:
      enabled: false

# cert-manager support
# Setting this true will have cert-manager create a private CA for the cluster
# as well as the certificates for each cluster node.
certManager:
  enabled: false
  clusterDomain: cluster.local
  keystorePasswd: changeme
  truststorePasswd: changeme
  replaceDefaultTrustStore: false
  additionalDnsNames:
    - localhost
  refreshSeconds: 300
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 100m
      memory: 128Mi
  # cert-manager takes care of rotating the node certificates, so default
  # their lifetime to 90 days.  But when the CA expires you may need to
  # 'helm delete' the cluster, delete all the node certificates and secrets,
  # and then 'helm install' the NiFi cluster again.  If a site-to-site trusted
  # CA or a NiFi Registry CA certificate expires, you'll need to restart all
  # pods to pick up the new version of the CA certificate.  So default the CA
  # lifetime to 10 years to avoid that happening very often.
  # c.f. https://github.com/cert-manager/cert-manager/issues/2478#issuecomment-1095545529
  certDuration: 2160h
  caDuration: 87660h

# ------------------------------------------------------------------------------
# Nifi registry:
# ------------------------------------------------------------------------------
registry:
  ## If true, install the Nifi registry
  enabled: false
  url: ""
  port: 80
  ## Add values for the nifi-registry here
  ## ref: https://github.com/dysnix/charts/blob/master/nifi-registry/values.yaml

ingress:
  enabled: true
  ingresstype: https
  pathType: ImplementationSpecific
  apiVersion: ""
  hostname: {{ ingresshostname }}
  ingressClassName: ""
  {%- if usedcpingress %}
  path: /{{ name }}(/|$)(.*)
  {%- else %}
  path: /
  {%- endif %}
  className: ""
  annotations:
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
    nginx.ingress.kubernetes.io/configuration-snippet: |
      proxy_set_header 'X-ProxyContextPath' '/{{ name }}';
      proxy_set_header 'X-ProxyPort' '443';
      proxy_set_header 'X-ProxyScheme' 'https';
    nginx.ingress.kubernetes.io/affinity: cookie
    nginx.ingress.kubernetes.io/session-cookie-path: "/"
    nginx.ingress.kubernetes.io/session-cookie-expires: "86400"
    nginx.ingress.kubernetes.io/session-cookie-max-age: "86400"
    nginx.ingress.kubernetes.io/session-cookie-change-on-failure: "true"
    nginx.ingress.kubernetes.io/affinity-mode: balanced
    nginx.ingress.kubernetes.io/session-cookie-samesite: None
    nginx.ingress.kubernetes.io/session-cookie-conditional-samesite-none: "true"      
  tls: true
  selfSigned: true
  extraHosts: []
  extraPaths: []
  secrets: []
  extraRules: []
  extraTls:
    - hosts:
        - {{ ingresshostname }}
      secretName: {{ name }}-{{ ingresshostname }}-tls



# ------------------------------------------------------------------------------
# Zookeeper:
# ------------------------------------------------------------------------------
imagecheckzk:
  registry: "{{ checkregitry }}"
  repository: "{{ checkrepository }}"
  pullPolicy: "{{ pullpolicy }}"
  tag: "{{ checktag }}"
  pullSecrets: []

zookeeper:
  enabled: {{ enableha }}
  nameOverride: ""
  fullnameOverride: ""
  namespaceOverride: ""
  namespace: "{{ namespace }}"
  runasuser: "{{ runasuser }}"
  enablepasswd: {{ enablepasswd }}

  global:
    imageRegistry: ""
    {%- if imagePullSecrets is defined and imagePullSecrets|length > 0 %}
    imagePullSecrets:
    {%- for imagePullSecret in imagePullSecrets %}
      - {{ imagePullSecret }}
    {%- endfor %}
    {%- else %}
    imagePullSecrets: []
    {%- endif %}
    storageClass: "{{ storageClassName }}"
    

  clusterDomain: "{{ clusterDomain }}"

  persistence:
    enabled: {{ persistdata }}
    datapath: /opt/dcp/zookeeper/data

    existingClaim: ""
    storageClassName: "{{ storageClassName }}"
    accessModes:
      - ReadWriteOnce
    size: {{zkdatasize}}Gi
    {%- if storageclassannotation is defined %}
    annotations:
{{ storageclassannotation|indent(6, True) }}
    {%- else %}
    annotations: {}
    {%- endif %}    
    {%- if podLabels is defined and podLabels|length > 0 %}
    labels:
    {%- for podLabel in podLabels %}
      {{ podLabel.name }}: "{{ podLabel.value }}"
    {%- endfor %}
    {%- else %}
    labels: {}
    {%- endif %}
    selector: {}
    dataLogDir:
      size: {{zkdatasize}}Gi
      existingClaim: ""
      selector: {}

  replicaCount: {{ zkreplicacount }}

  {%- if commonLabels is defined and commonLabels|length > 0 %}
  commonLabels:
  {%- for commonLabel in commonLabels %}
    {{ commonLabel.name }}: "{{ commonLabel.value }}"
  {%- endfor %}
  {%- else %}
  commonLabels: {}
  {%- endif %}

  {%- if podLabels is defined and podLabels|length > 0 %}
  podLabels:
  {%- for podLabel in podLabels %}
    {{ podLabel.name }}: "{{ podLabel.value }}"
  {%- endfor %}
  {%- else %}
  podLabels: {}
  {%- endif %}

  {%- if commonAnnotations is defined and commonAnnotations|length > 0 %}
  commonAnnotations:
  {%- for commonAnnotation in commonAnnotations %}
    {{ commonAnnotation.name }}: "{{ commonAnnotation.value }}"
  {%- endfor %}
  {%- else %}
  commonAnnotations: {}
  {%- endif %}

  {%- if podAnnotations is defined and podAnnotations|length > 0 %}
  podAnnotations:
  {%- for podAnnotation in podAnnotations %}
    {{ podAnnotation.name }}: "{{ podAnnotation.value }}"
  {%- endfor %}
  {%- else %}
  podAnnotations: {}
  {%- endif %}

  securityContext: {}

  hostAliases: []

  dnsConfig: []

  affinity: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []

  nodeSelector: {}

  tolerations: []

  topologySpreadConstraints: []

  podManagementPolicy: Parallel

  priorityClassName: ""

  schedulerName: ""

  updateStrategy:
    type: RollingUpdate
    rollingUpdate: {}
    
  {%- if imagePullSecrets is defined and imagePullSecrets|length > 0 %}
  imagePullSecrets:
  {%- for imagePullSecret in imagePullSecrets %}
    - {{ imagePullSecret }}
  {%- endfor %}
  {%- else %}
  imagePullSecrets: []
  {%- endif %}

  image:
    registry: "{{ zkregitry }}"
    repository: "{{ zkrepository }}"
    pullPolicy: {{pullpolicy}}
    tag: "{{ zktag}}"
    pullSecrets: []

  initContainer:
    image:
      registry: "{{ zkregitry }}"
      repository: "{{ zkrepository }}"
      pullPolicy: {{pullpolicy}}
      tag: "{{ zktag}}"
      pullSecrets: []

    resources: 
      requests:
        cpu: 200m
        memory: 256Mi
      limits:
        cpu: 400m
        memory: 500Mi

  service:
    disableBaseClientPort: false
    type: ClusterIP
    ports:
      client: 2181
      tls: 3181
      follower: 2888
      election: 3888
    nodePorts:
      client: ""
      tls: ""
    annotations: {}
    extraPorts: []
    clusterIP: ""
    externalTrafficPolicy: Cluster
    loadBalancerSourceRanges: []
    loadBalancerIP: ""
    sessionAffinity: None
    sessionAffinityConfig: {}
    headless:
      publishNotReadyAddresses: true
      annotations: {}
      servicenameOverride: ""  

  containerSecurityContext:
    enabled: true
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: {{runasuser}}
    allowPrivilegeEscalation: false
    seccompProfile:
      type: RuntimeDefault
    capabilities:
      drop: ["ALL"]   

  podSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: {{runasuser}}
    fsGroup: {{runasuser}}

  serviceAccount:
    create: false
    annotations: {}
    name: ""

  resources:
    requests:
      memory: {{ requestzkmem }}{{unitzkrequestmem}}
      cpu: {{ requestzkcpu }}{% if unitzkrequestcpu == "m" %}m{% endif %}
    limits: 
      memory: {{ limitzkmem }}{{unitzklimitmem}}
      cpu: {{ limitzkcpu }}{% if unitzklimitcpu == "m" %}m{% endif %}      

  command:
    - /opt/dcp/zookeeper/bin/zkServer.sh
  args:
    - "start-foreground"
    #- "$@"


  diagnosticMode:
    enabled: false
    command:
      - sleep
    args:
      - infinity


  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
    probeCommandTimeout: 2

  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
    probeCommandTimeout: 2


  startupProbe:
    enabled: false
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1

  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}

  tls:
    client:
      enabled: false

  zookeeper:
    tickTime: 2000
    initLimit: 10
    syncLimit: 5
    maxClientCnxns: 60
    snapRetainCount: 3
    purgeInterval: 0

    preAllocSize: 65536
    snapCount: 100000
    maxCnxns: 0
    reconfigEnabled: false
    quorumListenOnAllIPs: false
    whitelist: srvr, mntr, ruok, stat
    maxSessionTimeout: 40000
    serverPort: 8080
    enableServer: true









additionalCertificate:
  kclk_1: |-
    -----BEGIN CERTIFICATE-----
    MIIEYDCCA0igAwIBAgIQXdahFBxJpd6R1ffdmCzsajANBgkqhkiG9w0BAQsFADAa
    MRgwFgYDVQQDEw9kY3AtaW50ZXJuYWwtY2EwIBcNMjMwOTI4MTg1MTM3WhgPMjEw
    MzA5MDkxODUxMzdaMBQxEjAQBgNVBAMTCWxvY2FsaG9zdDCCASIwDQYJKoZIhvcN
    AQEBBQADggEPADCCAQoCggEBAPVNyHj0ho0z2Cz4nzEUfiucRsnrnwqUMv32kLbg
    vN31JsmIztCtVEoj4Fl4P0kIEOXiV6FMqrP9m5qJhNE1HAekZOiKEHg5qBCfZrkb
    nXqrVugT9g1+k8JPEg849wPt1X+iHtOLp3tQcLVscGrKa0hVxOOyAHb2ajD6vsLD
    pr0S8dSk9DNYLNWr6P9krCOGkEoVNY6BsQs6OMFdTIBdTJFw+YI47C3TSwHhCTXI
    szysZ5rrkSin+dzE4Pf+PEvpkCbhE5dP1IfP/2PWlQ4qYtK3pPyKUkEOLjoPKBM2
    Bw+cqSKCPSNBtEdvFgLETxjSh03jC8DRQryOb8043629ff0CAwEAAaOCAaQwggGg
    MA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIw
    DAYDVR0TAQH/BAIwADAfBgNVHSMEGDAWgBRy5TL7T2l4mbWJBXeNbcU4dJodcjCC
    AT4GA1UdEQSCATUwggExghcqLSouKi5zdmMuY2x1c3Rlci5sb2NhbIITKi5zdmMu
    Y2x1c3Rlci5sb2NhbIIXKi4qLiouc3ZjLmNsdXN0ZXIubG9jYWyCFSouKi5zdmMu
    Y2x1c3Rlci5sb2NhbIIWKi5kY3AtdGVjaG5vbG9naWVzLmNvbYIGKi50ZXN0ggls
    b2NhbGhvc3SCKyouYXBwcy5zYW5kYm94LW0yLmxsOWsucDEub3BlbnNoaWZ0YXBw
    cy5jb22CKSouYXBwcy5yaG9kY3AwMS5nZ2VjLnAxLm9wZW5zaGlmdGFwcHMuY29t
    gg8qLmNsdXN0ZXIubG9jYWyCESouKi5jbHVzdGVyLmxvY2FsghMqLiouKi5jbHVz
    dGVyLmxvY2FsghUqLiouKi4qLmNsdXN0ZXIubG9jYWwwDQYJKoZIhvcNAQELBQAD
    ggEBAMQjW71bsK+nyBJ1QYbU8wE0pWNcjifVj+8ey7AdXa0iH3B7ZKfewmUNUO4t
    l3A1xfWyzvMjfXuEi11qYchyHuHVNr/gCy3LuQvgbrjF8wvolCCRV8d+DqRsvjGA
    1v9a+Ad3775eSDvmlQg9vKq/0Gx6o5V6ZniPZWeRrDCXRgVV9UNrBDndVW686xbE
    laX/yqBgRVOyxA01lcyOh5hDfeCr3nFccNp5YNipTOCkGYubRuTCP6YpS576N+i3
    10qWESawisbE0fR7TiC/QnLG2trrPh79CoSAZk+JG/LGNAj4XddYYvkW9iuOwNXC
    vCvUnlpZflraSt3FNhPALMaqxGc=
    -----END CERTIFICATE-----


dcpca:
  crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURJakNDQWdxZ0F3SUJBZ0lSQU1zN0NPam9FeUlUZXVVMmptQ1lvcW93RFFZSktvWklodmNOQVFFTEJRQXcKR2pFWU1CWUdBMVVFQXhNUFpHTndMV2x1ZEdWeWJtRnNMV05oTUNBWERUSXpNRGt5T0RFNE5URXpOMW9ZRHpJeApNRE13T1RBNU1UZzFNVE0zV2pBYU1SZ3dGZ1lEVlFRREV3OWtZM0F0YVc1MFpYSnVZV3d0WTJFd2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEYSs5MHVkVTBzWFJYWjUxQXU1TUlCOWRyQXc4VTkKYXFZL1dBcTJIMWt2WTlGVk1CWXhzTGIrdytXNnVKSkNKbzVqZFA2TlNYNFg1TEVKbllXd3EvenlBMWRxRUxvbQpmak96OHRQZkdrUGtjbWN5SnA4R3lsQ3R0OUNkcEloWGdCY29iczdpYnRUUmo1NGM4Q2N3TTBnMmVCMFR0ZCt6Cnd5ZGh3clZwZlRWcnFJS0ZEMnNpdnAyZlJMSk5aTE1td0thVFJWSnhoUWJTcDZ1LzJDcmVwNDJVa3N0U2tmdlUKTGVFYk1vbmw3VnBOL0dYMU9nTWp5Vk5sUmxKNUx3S3A0dmFQYngzeENWS0daZEdYd1ZMVDNiL1NOSVllN2RQdQpqQnFRNThlcnMxeks0R1pBR0g5UUFINWYxTEJpMHlkaUdLaFNOK3JORWkyOTVCQU50ajhMT0N6MUFnTUJBQUdqCllUQmZNQTRHQTFVZER3RUIvd1FFQXdJQ3BEQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUgKQXdJd0R3WURWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVWN1VXkrMDlwZUptMWlRVjNqVzNGT0hTYQpIWEl3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCQUdyNC9yUmJwTVRJVGpDRXFvdmEzajRGbUhBaHhoSkhJaHVUClBSSFZjUWpsK21PVWxHWVhMazNUUGNQWmhNQ25hU0x0M1g4cDg2YWhxS2loYzNTRHJWTjFQd2lSZGc0bC9tU28KRG12ZnYydmN6MXBucnNLbXlBeEVHeE5SNGdiV0NLcWYyeks3UHpPZ2JlWDcwbHJvcDViR2FBUENBSnhiRzJ6MgpYWkxVZTBteEJ0WHZLVWcwMmFpeER2eTZIdjFlWVRQdWVGNHFmRkNGZGFHd2srcTFDTHpuTXhDL1R6VHpRNVU2Cnl5VFAvUzlFSnkxa08rS29IS1pESXByUzIwWUZRazhmbmdDbm1QMmE0eWJYa09nRElJWG84VUVoYStKWUxwaEEKeGJ0S28vbVNsMEQxcjQ1Q0JUN21idWhHeVpSYTJCU1o4YkVFOFhKODhUOGUxanl3SExFPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBMnZ2ZExuVk5MRjBWMmVkUUx1VENBZlhhd01QRlBXcW1QMWdLdGg5WkwyUFJWVEFXCk1iQzIvc1BsdXJpU1FpYU9ZM1QralVsK0YrU3hDWjJGc0t2ODhnTlhhaEM2Sm40enMvTFQzeHBENUhKbk1pYWYKQnNwUXJiZlFuYVNJVjRBWEtHN080bTdVMFkrZUhQQW5NRE5JTm5nZEU3WGZzOE1uWWNLMWFYMDFhNmlDaFE5cgpJcjZkbjBTeVRXU3pKc0NtazBWU2NZVUcwcWVydjlncTNxZU5sSkxMVXBINzFDM2hHektKNWUxYVRmeGw5VG9ECkk4bFRaVVpTZVM4Q3FlTDJqMjhkOFFsU2htWFJsOEZTMDkyLzBqU0dIdTNUN293YWtPZkhxN05jeXVCbVFCaC8KVUFCK1g5U3dZdE1uWWhpb1VqZnF6Ukl0dmVRUURiWS9DemdzOVFJREFRQUJBb0lCQUZBZHY0RWt4MVJJeGhyUAp4d1V4Q2syL1RnWWlXY0lyaDZFN0s4Z1AxZ2hCZzYrZ0JTNnUwWFNKNVQyWUUyS0NTcXZXZk43aUdYRFNhWGIwCkc1cFVnaGxrNFpGYmgwOVg4c0NPUWJlcEcxZTBCMDlRMC9PZkJ6OVhOY3JIREY2KzdUb011RUlkZkYwakp4eTkKUEFrbGFmRUxwcyswUmFDMThHMlMxOTQ5UWRNZHlOT1NsaWloay80a2Y5NHZjSE9aeW8vQVEwMFNqV1RibDVNdwovbHo0Y1hTV3hXWUlhQUhIUWZZRTJNYW5EajNhS2lLRmFpRUxEMk1DWnpCWC9Na3p0Uzh3NFZmNDBWampjbzFOCjROYVlMNW9KcE55OWxsSDc2bS9hZ20vcXVhU0xsMTJ0N3RBb2NFVDhpdjVhbGd4ZnhrSXY5QXRaYnk5d3Qyck4KWkNmK1VzMENnWUVBM0FYcnNRTVRQaTNsbTRrQWc5QzBhUFdOY29xV3VmclR2QXVNZ1pnTS93NlVQc3MrRnFaRgpBakQzU3N1M05QSFA1SmMwTEVQQVJyZmhJVHpCRjRFWGlnbC9KSGFOaXpvb3VHdVZ3MGZoUzBjUXdtT25XcGE5CjQ5R1Z0REpqeUd4MFBhcTRvMDdwYUhVSGo4ME5MdmJDZmdabWphWnVZNmdPd0wydURKY2xmSXNDZ1lFQS9zcHcKZHZ3cjZvQno0SEpMRzliMVJkL01xWGU0eXhKWkhZZ21zOXRqYldkQXpKcFFOaFkvTDRNTlM1bUdUeWs5bnR3Mwp4Mmo4Wkk3aUNRSVpmclpLVUpKNHJRTVh1NGoxMjN2c0NCcjEwcUw2aFZJcXh3aGQ2NkNNNUZvbmFEZUxuOUg1CkxLVmFBUHhtR0czVEthbGNUdkNQWTRzTkNWdWhFYnZBMkFRV3JIOENnWUVBdi81YW9PZ3lEbncyYy9hbEFHRksKVEp5WmhXM3lBUEFqZTJBSWg3MksrYlpiSGtCME9ZZDFpR2Y2SXNhSlpDWHVaMmFhSEZZeW5vTXViTFo3T0d0cApnd2F1Yjc4VDNINHZzbDRQSFl6SHg4eUhqMWt1WEJwV01VcGQvQlJNaGtROVd1SnlvKzdrTmthSkJxN0Q1a3RsCmhGdEplaW5WQWhsUVpsZ2VYTlkzMitrQ2dZRUF6QVZTZFJTTUhlVHA1T25nVnRTVDVuWEVybGJkdEU1bTZZemkKWU5ibUVPN0RKcExTYzl6d2o1MERBbXhXN2dCNkJVRVZzU25TSUx1QkovRjBkTkNIUldsa0ZEWUx4UEZ3M1dXbgpwUDNocGQ4M2Q1WktCc0llWXRWV3ZHdXNibms3NXFmK1BNL1MrRU1qaGFBN25IcXZIYzduSXJCdnFmU2pUMDNtCnA1THVqUVVDZ1lFQWg3T0NUdjc1dmJZbG9sOGJsM3FiUXl6R2RWa2RxWWp3ODdXTzlLUFM2SVZOUEdPRG12OEUKYXd2UlU5YWNSdCtteWIxcytJYVBOWmhoa0dHSThtL3llcG4rdGN0YXIrbEUyRWxoQkx3cjFyMW96T0VzR0RISgpWZjFJN2N0ZUdzaTBxem9YUGw4MHJXV01sYWEyakVESmJ6anRnZ2pzZmF1ZHdTaldUTVlRUm5vPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=
dcptls:
  crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVZRENDQTBpZ0F3SUJBZ0lRWGRhaEZCeEpwZDZSMWZmZG1DenNhakFOQmdrcWhraUc5dzBCQVFzRkFEQWEKTVJnd0ZnWURWUVFERXc5a1kzQXRhVzUwWlhKdVlXd3RZMkV3SUJjTk1qTXdPVEk0TVRnMU1UTTNXaGdQTWpFdwpNekE1TURreE9EVXhNemRhTUJReEVqQVFCZ05WQkFNVENXeHZZMkZzYUc5emREQ0NBU0l3RFFZSktvWklodmNOCkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFQVk55SGowaG8wejJDejRuekVVZml1Y1JzbnJud3FVTXYzMmtMYmcKdk4zMUpzbUl6dEN0VkVvajRGbDRQMGtJRU9YaVY2Rk1xclA5bTVxSmhORTFIQWVrWk9pS0VIZzVxQkNmWnJrYgpuWHFyVnVnVDlnMStrOEpQRWc4NDl3UHQxWCtpSHRPTHAzdFFjTFZzY0dyS2EwaFZ4T095QUhiMmFqRDZ2c0xECnByMFM4ZFNrOUROWUxOV3I2UDlrckNPR2tFb1ZOWTZCc1FzNk9NRmRUSUJkVEpGdytZSTQ3QzNUU3dIaENUWEkKc3p5c1o1cnJrU2luK2R6RTRQZitQRXZwa0NiaEU1ZFAxSWZQLzJQV2xRNHFZdEszcFB5S1VrRU9Mam9QS0JNMgpCdytjcVNLQ1BTTkJ0RWR2RmdMRVR4alNoMDNqQzhEUlFyeU9iODA0MzYyOWZmMENBd0VBQWFPQ0FhUXdnZ0dnCk1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXcKREFZRFZSMFRBUUgvQkFJd0FEQWZCZ05WSFNNRUdEQVdnQlJ5NVRMN1QybDRtYldKQlhlTmJjVTRkSm9kY2pDQwpBVDRHQTFVZEVRU0NBVFV3Z2dFeGdoY3FMU291S2k1emRtTXVZMngxYzNSbGNpNXNiMk5oYklJVEtpNXpkbU11ClkyeDFjM1JsY2k1c2IyTmhiSUlYS2k0cUxpb3VjM1pqTG1Oc2RYTjBaWEl1Ykc5allXeUNGU291S2k1emRtTXUKWTJ4MWMzUmxjaTVzYjJOaGJJSVdLaTVrWTNBdGRHVmphRzV2Ykc5bmFXVnpMbU52YllJR0tpNTBaWE4wZ2dscwpiMk5oYkdodmMzU0NLeW91WVhCd2N5NXpZVzVrWW05NExXMHlMbXhzT1dzdWNERXViM0JsYm5Ob2FXWjBZWEJ3CmN5NWpiMjJDS1NvdVlYQndjeTV5YUc5a1kzQXdNUzVuWjJWakxuQXhMbTl3Wlc1emFHbG1kR0Z3Y0hNdVkyOXQKZ2c4cUxtTnNkWE4wWlhJdWJHOWpZV3lDRVNvdUtpNWpiSFZ6ZEdWeUxteHZZMkZzZ2hNcUxpb3VLaTVqYkhWegpkR1Z5TG14dlkyRnNnaFVxTGlvdUtpNHFMbU5zZFhOMFpYSXViRzlqWVd3d0RRWUpLb1pJaHZjTkFRRUxCUUFECmdnRUJBTVFqVzcxYnNLK255QkoxUVliVTh3RTBwV05jamlmVmorOGV5N0FkWGEwaUgzQjdaS2Zld21VTlVPNHQKbDNBMXhmV3l6dk1qZlh1RWkxMXFZY2h5SHVIVk5yL2dDeTNMdVF2Z2JyakY4d3ZvbENDUlY4ZCtEcVJzdmpHQQoxdjlhK0FkMzc3NWVTRHZtbFFnOXZLcS8wR3g2bzVWNlpuaVBaV2VSckRDWFJnVlY5VU5yQkRuZFZXNjg2eGJFCmxhWC95cUJnUlZPeXhBMDFsY3lPaDVoRGZlQ3IzbkZjY05wNVlOaXBUT0NrR1l1YlJ1VENQNllwUzU3Nk4raTMKMTBxV0VTYXdpc2JFMGZSN1RpQy9RbkxHMnRyclBoNzlDb1NBWmsrSkcvTEdOQWo0WGRkWVl2a1c5aXVPd05YQwp2Q3ZVbmxwWmZscmFTdDNGTmhQQUxNYXF4R2M9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBOVUzSWVQU0dqVFBZTFBpZk1SUitLNXhHeWV1ZkNwUXkvZmFRdHVDODNmVW15WWpPCjBLMVVTaVBnV1hnL1NRZ1E1ZUpYb1V5cXMvMmJtb21FMFRVY0I2Ums2SW9RZURtb0VKOW11UnVkZXF0VzZCUDIKRFg2VHdrOFNEemozQSszVmY2SWUwNHVuZTFCd3RXeHdhc3ByU0ZYRTQ3SUFkdlpxTVBxK3dzT212Ukx4MUtUMApNMWdzMWF2by8yU3NJNGFRU2hVMWpvR3hDem80d1YxTWdGMU1rWEQ1Z2pqc0xkTkxBZUVKTmNpelBLeG5tdXVSCktLZjUzTVRnOS80OFMrbVFKdUVUbDAvVWg4Ly9ZOWFWRGlwaTByZWsvSXBTUVE0dU9nOG9FellIRDV5cElvSTkKSTBHMFIyOFdBc1JQR05LSFRlTUx3TkZDdkk1dnpUamZyYjE5L1FJREFRQUJBb0lCQUZNYUNNSkJSSnZ0Wmx6RgoxVmhSTXZVZk9qUUpxSlZ5NDF0NS9raVdGaVd6ZVhKbzhIZHRZTkxGR0tuMnZLbkhHOEpsVFg2TmRIOEplWDkrCit3bk16alFna3piY0h2dzd2QjMxZ2wxUFo2ZzVCM1lUM1JWeFBpbGpsQ0NvRWJhNUNjejFaVEFSYmFtdTlKL2gKbnF2dTZ5MVVNU0ZhR2lJekZJS0hUN3kzZjNNcG9BeTJCeURFU1RwRnJxdE50M0MwYTRJUUJYV25HRTFHZThLOQpQUzZKU3AzRjlJMlVNSjYvWUhLd21wbnF4bjU0S3A3T3czbTRxYVN1VVRQRVkySXZZdTZkaUlGeW4ydllYaDdRClRnaExVQ2NIT1djQ3o5dkJydEMxeko0MUlwZVFsc0xsV01sS2R5b0NsOUc3MmdnUkJkNmUzdEZQTEcyVGRCTVIKWXJ2S2VGa0NnWUVBK1pvSHVLUXJUQU5nRk5kQ3BrcVlnYlNlKzdrQjdUNUlKT0xYR3lSZjRvRWc1TEdzN1FvNQp6cGMxU21uL3M4aW9PN0M0c3p4WW1ZN25kSDdVNERrc1NPNHJzTVNFYUhaUnk1TFNGRzlrbFgwOUlFRmdxelk4CmEwYnhVbzA0b0JkR1lLa3g1Y2hGVkpzaSthZ0tBY1ZDV2EycXljL0NrL0UvUDVRcHgwbERhUnNDZ1lFQSs1ZU0KajdrRHdyS0gzbUp0TjFUV2xCUU1pdjFGMi9iV240TXc3L0FhNjBrRFlHL2QzR0FXcTVsRDF6WXNNNVJvekEvcApGMjU4M0Jwa3JZRVphVWZSSHU4WHJwMFNsQXo1dDZwaXNtRC85T3o1TUFDWXkrTWRHRnp2c21EZFVLOWhxK1ZPCm8yMGUwbE9uVjR4VjhYK2UzbXBkSTNuYTc5MFhPVEFHZVFjSy9zY0NnWUVBc09oZEpKOG5HTjhqa0dIcG1WY3gKdEd6Q2FnTjh2QnZ5b2tJczE4MzJMK0g1NEYyV0JRUEVhUXArK05rY0pON0pibFVZOCtDSG8zN0h5YWZEVlpEdwpORmlxbXNVT1c4UFF3WXEwWDB0OGJQK3cvVldaSUlCMlhrcVA3RVN2cDdnWFo1ZEVDR3JqeU0yVUFvTDVaTHZkCkJSYTBBQW5ERFh4bHFiaG56Qm0vTDVVQ2dZRUF4QXpqTm5mSXkyWU5aQ2kwektJcWw3ZEwwdDdzR2kwdUw1eXUKZkxwUWI3bzBqR2gvclNPZlp0YUd1K1IxNnplaHRpcEx5N3VJUm9lMm5sRjBlTXJDMVdVZ3dpdVo5NDVvNVVzNwpuNTdndFg0WDYrVDdMQjN0WlRlK2ZQVG9ZT0JacnZhQUllOTlUZzVyMzFmMi9Mb2pGVlF6QWRzSjFWSW1yNlNSCjFxdTdVSzhDZ1lFQXBBdGdYNDJhelZjM3MvK3cvbTZ5WFM5UVZIN0Zia3k3NEViakMvZWN3eWhNUGpMd2pkMEUKcVhsOGtlQmw3V1hXSGZ1ZVZhSElvNWJNd3ovZW9Vdi92WUkrckdlOWVGdVZlOWtqM0NMQjFUVFVmeGg1am84ZAo1Q3lrUExQVlNjampnRkhnRmdsZ2kvQ2JtUUN5VnJHSHhYVkszVmd4aFI2VlVxUGRaQzVKTTVRPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=

certificate: |-
    -----BEGIN CERTIFICATE-----
    MIIEYDCCA0igAwIBAgIQXdahFBxJpd6R1ffdmCzsajANBgkqhkiG9w0BAQsFADAa
    MRgwFgYDVQQDEw9kY3AtaW50ZXJuYWwtY2EwIBcNMjMwOTI4MTg1MTM3WhgPMjEw
    MzA5MDkxODUxMzdaMBQxEjAQBgNVBAMTCWxvY2FsaG9zdDCCASIwDQYJKoZIhvcN
    AQEBBQADggEPADCCAQoCggEBAPVNyHj0ho0z2Cz4nzEUfiucRsnrnwqUMv32kLbg
    vN31JsmIztCtVEoj4Fl4P0kIEOXiV6FMqrP9m5qJhNE1HAekZOiKEHg5qBCfZrkb
    nXqrVugT9g1+k8JPEg849wPt1X+iHtOLp3tQcLVscGrKa0hVxOOyAHb2ajD6vsLD
    pr0S8dSk9DNYLNWr6P9krCOGkEoVNY6BsQs6OMFdTIBdTJFw+YI47C3TSwHhCTXI
    szysZ5rrkSin+dzE4Pf+PEvpkCbhE5dP1IfP/2PWlQ4qYtK3pPyKUkEOLjoPKBM2
    Bw+cqSKCPSNBtEdvFgLETxjSh03jC8DRQryOb8043629ff0CAwEAAaOCAaQwggGg
    MA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIw
    DAYDVR0TAQH/BAIwADAfBgNVHSMEGDAWgBRy5TL7T2l4mbWJBXeNbcU4dJodcjCC
    AT4GA1UdEQSCATUwggExghcqLSouKi5zdmMuY2x1c3Rlci5sb2NhbIITKi5zdmMu
    Y2x1c3Rlci5sb2NhbIIXKi4qLiouc3ZjLmNsdXN0ZXIubG9jYWyCFSouKi5zdmMu
    Y2x1c3Rlci5sb2NhbIIWKi5kY3AtdGVjaG5vbG9naWVzLmNvbYIGKi50ZXN0ggls
    b2NhbGhvc3SCKyouYXBwcy5zYW5kYm94LW0yLmxsOWsucDEub3BlbnNoaWZ0YXBw
    cy5jb22CKSouYXBwcy5yaG9kY3AwMS5nZ2VjLnAxLm9wZW5zaGlmdGFwcHMuY29t
    gg8qLmNsdXN0ZXIubG9jYWyCESouKi5jbHVzdGVyLmxvY2FsghMqLiouKi5jbHVz
    dGVyLmxvY2FsghUqLiouKi4qLmNsdXN0ZXIubG9jYWwwDQYJKoZIhvcNAQELBQAD
    ggEBAMQjW71bsK+nyBJ1QYbU8wE0pWNcjifVj+8ey7AdXa0iH3B7ZKfewmUNUO4t
    l3A1xfWyzvMjfXuEi11qYchyHuHVNr/gCy3LuQvgbrjF8wvolCCRV8d+DqRsvjGA
    1v9a+Ad3775eSDvmlQg9vKq/0Gx6o5V6ZniPZWeRrDCXRgVV9UNrBDndVW686xbE
    laX/yqBgRVOyxA01lcyOh5hDfeCr3nFccNp5YNipTOCkGYubRuTCP6YpS576N+i3
    10qWESawisbE0fR7TiC/QnLG2trrPh79CoSAZk+JG/LGNAj4XddYYvkW9iuOwNXC
    vCvUnlpZflraSt3FNhPALMaqxGc=
    -----END CERTIFICATE-----
    
key: |-
    -----BEGIN RSA PRIVATE KEY-----
    MIIEpQIBAAKCAQEA9U3IePSGjTPYLPifMRR+K5xGyeufCpQy/faQtuC83fUmyYjO
    0K1USiPgWXg/SQgQ5eJXoUyqs/2bmomE0TUcB6Rk6IoQeDmoEJ9muRudeqtW6BP2
    DX6Twk8SDzj3A+3Vf6Ie04une1BwtWxwasprSFXE47IAdvZqMPq+wsOmvRLx1KT0
    M1gs1avo/2SsI4aQShU1joGxCzo4wV1MgF1MkXD5gjjsLdNLAeEJNcizPKxnmuuR
    KKf53MTg9/48S+mQJuETl0/Uh8//Y9aVDipi0rek/IpSQQ4uOg8oEzYHD5ypIoI9
    I0G0R28WAsRPGNKHTeMLwNFCvI5vzTjfrb19/QIDAQABAoIBAFMaCMJBRJvtZlzF
    1VhRMvUfOjQJqJVy41t5/kiWFiWzeXJo8HdtYNLFGKn2vKnHG8JlTX6NdH8JeX9+
    +wnMzjQgkzbcHvw7vB31gl1PZ6g5B3YT3RVxPiljlCCoEba5Ccz1ZTARbamu9J/h
    nqvu6y1UMSFaGiIzFIKHT7y3f3MpoAy2ByDESTpFrqtNt3C0a4IQBXWnGE1Ge8K9
    PS6JSp3F9I2UMJ6/YHKwmpnqxn54Kp7Ow3m4qaSuUTPEY2IvYu6diIFyn2vYXh7Q
    TghLUCcHOWcCz9vBrtC1zJ41IpeQlsLlWMlKdyoCl9G72ggRBd6e3tFPLG2TdBMR
    YrvKeFkCgYEA+ZoHuKQrTANgFNdCpkqYgbSe+7kB7T5IJOLXGyRf4oEg5LGs7Qo5
    zpc1Smn/s8ioO7C4szxYmY7ndH7U4DksSO4rsMSEaHZRy5LSFG9klX09IEFgqzY8
    a0bxUo04oBdGYKkx5chFVJsi+agKAcVCWa2qyc/Ck/E/P5Qpx0lDaRsCgYEA+5eM
    j7kDwrKH3mJtN1TWlBQMiv1F2/bWn4Mw7/Aa60kDYG/d3GAWq5lD1zYsM5RozA/p
    F2583BpkrYEZaUfRHu8Xrp0SlAz5t6pismD/9Oz5MACYy+MdGFzvsmDdUK9hq+VO
    o20e0lOnV4xV8X+e3mpdI3na790XOTAGeQcK/scCgYEAsOhdJJ8nGN8jkGHpmVcx
    tGzCagN8vBvyokIs1832L+H54F2WBQPEaQp++NkcJN7JblUY8+CHo37HyafDVZDw
    NFiqmsUOW8PQwYq0X0t8bP+w/VWZIIB2XkqP7ESvp7gXZ5dECGrjyM2UAoL5ZLvd
    BRa0AAnDDXxlqbhnzBm/L5UCgYEAxAzjNnfIy2YNZCi0zKIql7dL0t7sGi0uL5yu
    fLpQb7o0jGh/rSOfZtaGu+R16zehtipLy7uIRoe2nlF0eMrC1WUgwiuZ945o5Us7
    n57gtX4X6+T7LB3tZTe+fPToYOBZrvaAIe99Tg5r31f2/LojFVQzAdsJ1VImr6SR
    1qu7UK8CgYEApAtgX42azVc3s/+w/m6yXS9QVH7Fbky74EbjC/ecwyhMPjLwjd0E
    qXl8keBl7WXWHfueVaHIo5bMwz/eoUv/vYI+rGe9eFuVe9kj3CLB1TTUfxh5jo8d
    5CykPLPVScjjgFHgFglgi/CbmQCyVrGHxXVK3VgxhR6VUqPdZC5JM5Q=
    -----END RSA PRIVATE KEY-----    