name: "{{ name }}"
nameOverride: "{{ nameOverride }}"
fullnameOverride: "{{ fullnameOverride }}"
namespaceOverride: "{{ namespace }}"

appservice: "dcp-{{ name }}-launcher-{{ randomstring }}-svc"
appport: {{ appport }}

clusterDomain: "{{ clusterDomain }}"

storageClassName: "{{ storageclassname }}"

replicaCount: 1

enableauthent: {{enableauthent}}
enableingresstls: {{ enableingresstls }}
timestamp: {{ timestamp }}

global:
  {%- if imagePullSecrets is defined and imagePullSecrets|length > 0 %}
  imagePullSecrets:
  {%- for imagePullSecret in imagePullSecrets %}
    - {{ imagePullSecret }}
  {%- endfor %}
  {%- else %}
  imagePullSecrets: []
  {%- endif %}

{%- if commonLabels is defined and commonLabels|length > 0 %}
commonLabels:
{%- for commonLabel in commonLabels %}
  {{ commonLabel.name }}: "{{ commonLabel.value }}"
{%- endfor %}
{%- else %}
commonLabels: {}
{%- endif %}

{%- if commonAnnotations is defined and commonAnnotations|length > 0 %}
commonAnnotations:
{%- for commonAnnotation in commonAnnotations %}
  {{ commonAnnotation.name }}: "{{ commonAnnotation.value }}"
{%- endfor %}
{%- else %}
commonAnnotations: {}
{%- endif %}

{%- if podLabels is defined and podLabels|length > 0 %}
podLabels:
{%- for podLabel in podLabels %}
  {{ podLabel.name }}: "{{ podLabel.value }}"
{%- endfor %}
{%- else %}
podLabels: {}
{%- endif %}

{%- if podAnnotations is defined and podAnnotations|length > 0 %}
podAnnotations:
{%- for podAnnotation in podAnnotations %}
  {{ podAnnotation.name }}: "{{ podAnnotation.value }}"
{%- endfor %}
{%- else %}
podAnnotations: {}
{%- endif %}

diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity

hostNetwork: false

{%- if dnsConfig is defined %}
dnsConfig:
{{ dnsConfig|indent(2, True) }}
{%- else %}
dnsConfig: []
{%- endif %}
  
{%- if hostAliases is defined %}
hostAliases:
{{ hostAliases|indent(2, True) }}
{%- else %}
hostAliases: []
{%- endif %}

nodeSelector: {}

tolerations: []

affinity: {}

topologySpreadConstraints: []

priorityClassName: "{{ priorityclassname }}"

schedulerName: "{{ schedulername }}"

updateStrategy:
  type: RollingUpdate


terminationGracePeriodSeconds: ""


serviceAccount:
  enabled: true
  create: true
  name: "{{ servicecaccount }}"
  {%- if podAnnotations is defined and podAnnotations|length > 0 %}
  annotations:
  {%- for podAnnotation in podAnnotations %}
    {{ podAnnotation.name }}: "{{ podAnnotation.value }}"
  {%- endfor %}
  {%- else %}
  annotations: {}
  {%- endif %}
  automountServiceAccountToken: true  


certmanager:
  enabled: {{ certmanager }}
  issuer: ca-issuer
  duration: 8760h
  renewBefore: 2208h
  dnsNames:
    - "*.svc.cluster.local" 
    - "*.*.*.svc.cluster.local"
    - "*.*.svc.cluster.local"
    - "*.dcp-technologies.com"
    - "*.test"
    - "localhost"
    - "*.apps.sandbox-m2.ll9k.p1.openshiftapps.com"

containerSecurityContext:
  enabled: true
  runAsNonRoot: true
  runAsUser: {{ runasuser }}
  allowPrivilegeEscalation: false
  seccompProfile:
    type: RuntimeDefault
  capabilities:
    drop: ["ALL"]   

podSecurityContext:
  enabled: true
  runAsNonRoot: true
  runAsUser: {{ runasuser }}
  fsGroup: {{ runasuser }}


oauth:
  port: 4180
  registry: "{{ oauthregistry }}"
  repository: "{{ oauthrepository }}"
  pullPolicy: "{{ pullpolicy }}"
  tag: "{{ oauthtag }}"
  pullSecrets: []
  cookiesecret: "{{clientsecret}}"
  oidcissuer: "{{ serverUrl }}/realms/{{realm}}"
  ingresshostname: "{{ ingresshostname }}"
  proxyscope: "email openid profile"
  allwedgroups: "/{{realm}}"
  idclient: "{{name}}"
  clientsecret: "{{clientsecret}}"
  realm: "{{realm}}"
  resources: 
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 200m
      memory: 512Mi

dcpproxy:
  port: 8080
  replicas: 1
  registry: "{{ proxyregistry }}"
  repository: "{{ proxyrepository }}"
  pullPolicy: "{{ pullpolicy }}"
  tag: "{{ proxytag }}"
  resources: 
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 200m
      memory: 512Mi


service:
  type: ClusterIP
  ports:
    http: 8080
    https: 8080
  nodePorts:
    http: ""
    https: ""
  clusterIP: ""
  annotations: {}    

resources: 
  requests:
    cpu: 100m
    memory: 256Mi
  limits:
    cpu: 500m
    memory:  512Mi

security:
  ssl:
    autoGenerated: false

ingress:
  enabled: true
  ingresstype: oauthhttp
  pathType: ImplementationSpecific
  apiVersion: ""
  hostname: dcpapi.test
  ingressClassName: ""
  path: /{{ name }}
  className: ""
  annotations:
{{ nginxannotation|indent(4, True) }}    
    {%- if enableingresstls %}
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    {%- endif %}
  tls: {{ enableingresstls }}
  selfSigned: {{ enableingresstls }}
  extraHosts: []
  extraPaths: []
  secrets: []
  extraRules: []

ca:
  crt: {{ cacrt }}
  key: {{ cakey }}
tls:
  crt: {{ tlscrt }}
  key: {{ tlskey }}  