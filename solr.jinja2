name: "{{ name }}"
namespace: "{{ namespace }}"
nameOverride: "{{ nameOverride }}"
fullnameOverride: "{{ fullnameOverride }}"
namespaceOverride: "{{ namespaceOverride }}"
runassuser: "{{ runassuser }}"
enablepasswd: {{ enablepasswd }}

clusterDomain: {{ clusterDomain }}

storageClassName: {{ storageClassName }}

persistence:
  enabled: {{ enablestorage }}
  existingClaim: ""
  storageClassName: {{ storageClassName }}
  accessModes:
    - ReadWriteOnce
  size: {{ datasize }}Gi

  {%- if podAnnotations is defined and podAnnotations|length > 0 %}
  annotations:
  {%- for podAnnotation in podAnnotations %}
    {{ podAnnotation.name }}: {{ podAnnotation.value }}
  {%- endfor %}
  {%- else %}
  annotations: {}
  {%- endif %}

  {%- if podLabels is defined and podLabels|length > 0 %}
  labels:
  {%- for podLabel in podLabels %}
    {{ podLabel.name }}: {{ podLabel.value }}
  {%- endfor %}
  {%- else %}
  labels: {}
  {%- endif %}

  selector: {}
  dataLogDir:
    size: {{logsize }}Gi
    existingClaim: ""
    selector: {}

cloudEnabled: {{ cloudEnabled }}
auth:
  enabled: false

replicaCount: {{ replicaCount }}

global:
  {%- if imagePullSecrets is defined and imagePullSecrets|length > 0 %}
  imagePullSecrets:
  {%- for secret in imagePullSecrets %}
    - {{ secret }}
  {%- endfor %}
  {%- else %}
  imagePullSecrets: []
  {%- endif %}


image:
  registry: "{{ registry}}"
  repository: "{{ repository }}"
  pullPolicy: "IfNotPresent"
  tag: "{{ tag }}"
  pullSecrets: []

imagecheckzk:
  registry: "{{ checkregitry }}"
  repository: "{{ checkrepository }}"
  pullPolicy: "{{ pullpolicy }}"
  tag: "{{ checktag }}"
  pullSecrets: []

{%- if commonLabels is defined and commonLabels|length > 0 %}
commonLabels:
{%- for commonLabel in commonLabels %}
  {{ commonLabel.name }}: {{ commonLabel.value }}
{%- endfor %}
{%- else %}
commonLabels: {}
{%- endif %}

{%- if commonAnnotations is defined and commonAnnotations|length > 0 %}
commonAnnotations:
{%- for commonAnnotation in commonAnnotations %}
  {{ commonAnnotation.name }}: {{ commonAnnotation.value }}
{%- endfor %}
{%- else %}
commonAnnotations: {}
{%- endif %}

{%- if podLabels is defined and podLabels|length > 0 %}
podLabels:
{%- for podLabel in podLabels %}
  {{ podLabel.name }}: {{ podLabel.value }}
{%- endfor %}
{%- else %}
podLabels: {}
{%- endif %}

{%- if podAnnotations is defined and podAnnotations|length > 0 %}
podAnnotations:
{%- for podAnnotation in podAnnotations %}
  {{ podAnnotation.name }}: {{ podAnnotation.value }}
{%- endfor %}
{%- else %}
podAnnotations: {}
{%- endif %}

{%- if securityContext is defined and securityContext|length > 0 %}
securityContext:
{%- for item in securityContext %}
  {{ item.name }}: {{ item.value }}
{%- endfor %}
{%- else %}
securityContext: {}
{%- endif %}

podSecurityContext: 
  enabled: true
  runAsNonRoot: true
  runAsUser: {{ runasuser }}
  fsGroup: {{ runasuser }}

containerSecurityContext:
  enabled: true
  runAsNonRoot: true
  runAsUser: {{ runasuser }}
  allowPrivilegeEscalation: false
  seccompProfile:
    type: RuntimeDefault
  capabilities:
    drop: ["ALL"]

{%- if hostAliases is defined and hostAliases|length > 0 %}
hostAliases:
{{ hostAliases|indent(2, True) }}
{%- else %}
hostAliases: []
{%- endif %}

{%- if dnsConfig is defined and dnsConfig|length > 0 %}
dnsConfig:
{{ dnsConfig|indent(2, True) }}
{%- else %}
dnsConfig: []
{%- endif %}

affinity: {}
podAffinityPreset: ""
podAntiAffinityPreset: soft
nodeAffinityPreset:
  type: ""
  key: ""
  values: []

{%- if nodeSelector is defined and nodeSelector|length > 0 %}
nodeSelector:
{%- for item in nodeSelector %}
  {{ item.name }}: {{ item.value }}
{%- endfor %}
{%- else %}
nodeSelector: {}
{%- endif %}

tolerations: []

topologySpreadConstraints: []

podManagementPolicy: Parallel

priorityClassName: ""

schedulerName: ""  

serviceAccount:
  enabled: false
  create: false
  annotations: {}
  name: "dcp-solr-{{ name }}"

service:
  type: ClusterIP
  ports:
    http: {{ solrport }}
    https: {{ solrport }}
  nodePorts:
    http: ""
    https: ""
  clusterIP: ""
  annotations: {}

security:
  ssl:
    enabled: false
    autoGenerated: false

tlsingress:
  ssl:
    enabled: {{ enableingresstls}}
    autoGenerated: {{ enableingresstls}}

ingress:
  enabled: {{ enableingress }}
  {%- if ingressnumber %}
  ingresstype: 6083
  {%- else %}
  ingresstype: http
  {%- endif %}  
  pathType: ImplementationSpecific
  apiVersion: ""
  hostname: {{ ingresshostname }}
  ingressClassName: ""
  path: /{{ name }}
  className: ""
  {%- if nginxannotation is defined and nginxannotation|length > 0 %}
  annotations:
{{ nginxannotation|indent(4, True) }}
    {%- if enableingresstls %}
    #route.openshift.io/termination: passthrough
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    {%- endif %}
  {%- else %}
  annotations: {}
  {%- endif %}
  tls: {{enableingresstls}}
  selfSigned: {{enableingresstls}}
  extraHosts: []
  extraPaths: []
  extraTls: []
  secrets: []
  extraRules: []

resources:
  requests:
    memory: {{ requestmem }}{{ unitrequestmem }}
    cpu: {{ requestcpu }}{% if unitrequestcpu == "m" %}m{% endif %}
  limits: 
    memory: {{ limitmem }}{{ unitlimitmem }}
    cpu: {{ limitcpu }}{% if unitlimitcpu == "m" %}m{% endif %}

initContainer:
  resources: 
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 500m
      memory: 500Mi

customLivenessProbe: {}
livenessProbe:
  enabled: true
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 15
  failureThreshold: 30
  successThreshold: 1

customReadinessProbe: {}
readinessProbe:
  enabled: true
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 15
  failureThreshold: 30
  successThreshold: 1

customStartupProbe: {}
startupProbe:
  enabled: false
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 1
  failureThreshold: 15
  successThreshold: 1


autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 6
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

updateStrategy:
  type: RollingUpdate
  rollingUpdate: {}


MAX_AUDIT_RETENTION_DAYS: {{ retentiondays }}
RANGER_AUDITS_DATA_FOLDER: /opt/solr/data
SOLR_LOG_FOLDER: /opt/solr/log
SOLR_HEAP: {{solrheap }}
JAVA_HOME: /opt/java
SOLR_MAX_MEM: {{ solrmaxmemory }}G
SOLR_RANGER_HOME: /opt/solr/ranger_audit_server
SOLR_PORT: {{ solrport}}
SOLR_INSTALL_DIR: /opt/solr/solr-bin
SOLR_USER: solr
SOLR_ZK: {{ name }}-{{ name }}-zk-node-0.{{ name }}-{{ name }}-zk-headless.{{ namespace }}.{{ clusterDomain }}:2181,{{ name }}-{{ name }}-zk-node-1.{{ name }}-{{ name }}-zk-headless.{{ namespace }}.{{ clusterDomain }}:2181,{{ name }}-{{ name }}-zk-node-2.{{ name }}-{{ name }}-zk-headless.{{ namespace }}.{{ clusterDomain }}:2181/ranger_audits
SOLR_NUM_SHARDS: {{ numshards }}
SOLR_REPLICATION_FACTOR: {{ replicationfactor }}
SOLR_MAX_SHARDS_PER_NODE: {{ maxshardspernode }}

metrics:
  enabled: {{ enablemetrics }}
  configFile: "/opt/solr/solr-bin/contrib/prometheus-exporter/conf/solr-exporter-config.xml"
  threads: 7
  service: 
    type: ClusterIP
  containerPorts:
    http: 9854
  livenessProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 15
    failureThreshold: 15
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 15
    failureThreshold: 15
    successThreshold: 15
  startupProbe:
    enabled: false
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  resources:
    requests:
      cpu: 100m
      memory: 512Mi
    limits:
      cpu: 2
      memory: 2000Mi
  extraVolumes: []
  extraVolumeMounts: []





zookeeper:
  name: "{{ name }}"
  nameOverride: "{{ name }}-zk"
  fullnameOverride: ""
  namespaceOverride: ""
  namespace: "{{ namespace }}"
  enablepasswd: {{ enablepasswd }}
  runasuser: "{{ runasuser }}"

  global:
    imageRegistry: ""

    {%- if imagePullSecrets is defined and imagePullSecrets|length > 0 %}
    imagePullSecrets:
    {%- for secret in imagePullSecrets %}
      - {{ secret }}
    {%- endfor %}
    {%- else %}
    imagePullSecrets: []
    {%- endif %}

    storageClass: "{{ storageClassName }}"

  clusterDomain: {{ clusterDomain }}

  persistence:
    enabled: {{ enablestorage }}
    datapath: /opt/dcp/zookeeper/data

    existingClaim: ""
    storageClassName: "{{ storageClassName }}"
    accessModes:
      - ReadWriteOnce
    size: 10Gi

    {%- if podAnnotations is defined and podAnnotations|length > 0 %}
    annotations:
    {%- for podAnnotation in podAnnotations %}
      {{ podAnnotation.name }}: {{ podAnnotation.value }}
    {%- endfor %}
    {%- else %}
    annotations: {}
    {%- endif %}

    {%- if podLabels is defined and podLabels|length > 0 %}
    labels:
    {%- for podLabel in podLabels %}
      {{ podLabel.name }}: {{ podLabel.value }}
    {%- endfor %}
    {%- else %}
    labels: {}
    {%- endif %}

    selector: {}
    dataLogDir:
      size: 10Gi
      existingClaim: ""
      selector: {}

  replicaCount: 3

  commonLabels: {}

  commonAnnotations: {}

  podLabels: {}

  podAnnotations: {}

  securityContext: {}

  {%- if hostAliases is defined and hostAliases|length > 0 %}
  hostAliases:
{{ hostAliases|indent(4, True) }}
  {%- else %}
  hostAliases: []
  {%- endif %}

  {%- if dnsConfig is defined and dnsConfig|length > 0 %}
  dnsConfig:
{{ dnsConfig|indent(4, True) }}
  {%- else %}
  dnsConfig: []
  {%- endif %}

  affinity: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []

  {%- if nodeSelector is defined and nodeSelector|length > 0 %}
  nodeSelector:
  {%- for item in nodeSelector %}
    {{ item.name }}: {{ item.value }}
  {%- endfor %}
  {%- else %}
  nodeSelector: {}
  {%- endif %}

  tolerations: []

  topologySpreadConstraints: []

  podManagementPolicy: Parallel

  priorityClassName: ""

  schedulerName: ""

  updateStrategy:
    type: RollingUpdate
    rollingUpdate: {}

  image:
    registry: "{{ zkregistry}}"
    repository: "{{ zkrepository }}"
    pullPolicy: "{{ pullPolicy }}"
    tag: "{{ zktag }}"
    pullSecrets: []

  initContainer:
    image:
      registry: "{{ globalregistry}}"
      repository: "{{ repositoryzookeeper }}"
      pullPolicy: IfNotPresent
      tag: "{{ dcpzookeepertag }}"
      pullSecrets: []

    resources: 
      requests:
        cpu: 200m
        memory: 256Mi
      limits:
        cpu: 400m
        memory: 500Mi

  service:
    disableBaseClientPort: false
    type: ClusterIP
    ports:
      client: 2181
      tls: 3181
      follower: 2888
      election: 3888
    nodePorts:
      client: ""
      tls: ""
    extraPorts: []
    clusterIP: ""
    externalTrafficPolicy: Cluster
    loadBalancerSourceRanges: []
    loadBalancerIP: ""
    sessionAffinity: None
    sessionAffinityConfig: {}
    headless:
      publishNotReadyAddresses: true
      annotations: {}
      servicenameOverride: ""  

  podSecurityContext: 
    enabled: true
    runAsNonRoot: true
    runAsUser: {{ runasuser }}
    fsGroup: {{ runasuser }}
    
  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: {{ runasuser }}
    allowPrivilegeEscalation: false
    seccompProfile:
      type: RuntimeDefault
    capabilities:
      drop: ["ALL"]

  serviceAccount:
    enabled: false
    create: false
    annotations: {}
    name: ""


  resources: 
    requests:
      cpu: 200m
      memory: 256Mi
    limits:
      cpu: 2
      memory: 2000Mi

  command:
    - /opt/dcp/zookeeper/bin/zkServer.sh
  args:
    - "start-foreground"


  diagnosticMode:
    enabled: false
    command:
      - sleep
    args:
      - infinity


  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
    probeCommandTimeout: 2

  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
    probeCommandTimeout: 2


  startupProbe:
    enabled: false
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1

  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}

  tls:
    client:
      enabled: false

  zookeeper:
    tickTime: 2000
    initLimit: 10
    syncLimit: 5
    maxClientCnxns: 60
    snapRetainCount: 3
    purgeInterval: 0

    preAllocSize: 65536
    snapCount: 100000
    maxCnxns: 0
    reconfigEnabled: false
    quorumListenOnAllIPs: false
    whitelist: srvr, mntr, ruok, stat
    maxSessionTimeout: 40000
    serverPort: 8080
    enableServer: true