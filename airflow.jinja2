name: "{{ name }}"
nameOverride: "{{ nameOverride }}"
fullnameOverride: "{{ fullnameOverride }}"
namespaceOverride: "{{ namespace }}"
enablepasswd: {{ enablepasswd }}
enableldap: {{ enableldap }}
enableldaptls: {{ enableldaptls }}
securityenabled: {{ securityenabled }}
architecture: {{ architecture }}
schedulerName: "{{ kubeschedulername }}"
runasuser: "{{ runasuser }}"

eks: false
volumeid: fs-03e748c788037189c.efs.eu-west-3.amazonaws.com

defaultAirflowRepository: {{ registry }}/{{ repository }}
defaultAirflowTag: "{{ tag }}"
airflowVersion: "{{ tag }}"

webserverSecretKey: {{ webserverSecretKey }}
registry:
  secretName: {% if secretName %}{{ secretName }}{%- else %}~{% endif %}

images:
  statsd:
    repository: {{ statsdregistry }}/{{ statsdrepository }}
    tag: {{ statsdtag }}
    pullPolicy: {{ pullpolicy }}

# Volumes for all airflow containers
volumes:
  - name: root-tmp
    emptyDir: {}
  - name: passwd
    configMap:
      name: {{ name }}-{{ nameOverride }}-passwd-cm
  {% if enableldap and enableldaptls %}
  - name: ldap
    configMap:
      name: {{ name }}-{{ nameOverride }}-ldap-cm
  {% endif %}
  {% if enableingresstls %}
  - name: certs
    secret:
      secretName: {{ name }}-{{ nameOverride }}-tls
  {% endif %}
  {%- if not persistdag  %}
  - name: dags
    emptyDir: {}
  {% endif %}

# VolumeMounts for all airflow containers
volumeMounts:
  - name: root-tmp
    mountPath: /tmp
  - name: passwd
    mountPath: /etc/passwd
    subPath: passwd
  {% if enableldap and enableldaptls %}
  - name: ldap
    mountPath: /opt/dcp/extras/ldap.cert
    subPath: ldap.cert  
  {% endif %}
  {% if enableingresstls %}
  - name: certs
    mountPath: /certs
  {% endif %}
  {%- if not persistdag  %}
  - name: dags
    mountPath: /opt/airflow/dags
  {% endif %}  

securityContext: 
  runAsNonRoot: true
  runAsUser: {{ runasuser }}
  fsGroup: {{ runasuser }}

securityContexts:
  pod: {}
  containers:
    readOnlyRootFilesystem: true
    runAsUser: {{ runasuser }}
    allowPrivilegeEscalation: false
    seccompProfile:
      type: RuntimeDefault
    capabilities:
      drop: ["ALL"]  


{%- if podLabels is defined and podLabels|length > 0 %}
labels:
{%- for podLabel in podLabels %}
  {{ podLabel.name }}: "{{ podLabel.value }}"
{%- endfor %}
{%- else %}
labels: {}
{%- endif %}

{%- if podAnnotations is defined and podAnnotations|length > 0 %}
airflowPodAnnotations:
{%- for podAnnotation in podAnnotations %}
  {{ podAnnotation.name }}: "{{ podAnnotation.value }}"
{%- endfor %}
{%- else %}
airflowPodAnnotations: {}
{%- endif %}

executor: "{{ executor }}"

config:
  {# core:
    store_serialized_dags: True
    min_serialized_dag_update_interval: 5
    min_serialized_dag_fetch_interval: 5
    max_num_rendered_ti_fields_per_task: 5
    compress_serialized_dags: False #}
  webserver:
    x_frame_enabled: True    
    enable_proxy_fix: 'True'
    rbac: {% if enablerbac %}'True'{%- else %}'False'{% endif %}    
    {%- if authtype == "password"  %}
    auth_backend: airflow.contrib.auth.backends.password_auth
    {%- endif %}
    {%- if authtype == "ldap"  %}
    auth_backend: airflow.contrib.auth.backends.ldap_auth
    {%- endif %}
    authenticate: 'True'
    base_url: '{%- if enableingresstls  %}https://{%- else %}https://{%- endif %}{{ ingresshostname}}/{{ name }}'
  api:
    auth_backends: 'airflow.api.auth.backend.basic_auth'



{%- if extraEnvs is defined and extraEnvs|length > 0 %}
extraEnv: |
{% if enableldap and enableldaptls %}
  - name: LDAPTLS_REQCERT
    value: "never"
{%- endif %}
{%- for extraEnv in extraEnvs %}
  - name: {{ extraEnv.name }}
    value: "{{ extraEnv.value }}"
{%- endfor %}
{%- else %}
extraEnv: ~
{%- endif %}



data:
 metadataConnection:
    user:  {{dbuser}}
    pass: "{{dbpassword}}"
    protocol: postgresql
    host: {{name}}-{{nameOverride}}pgs{% if architecture == 'replication' %}-primary{% endif %}.{{namespace}}.{{clusterDomain}}
    port: {{portpgs}}
    db: {{dbname}}
    sslmode: disable


dags:
  persistence:
  {%- if persistdag  %}
  {%- if volumedagannotations  %}
    annotations: 
{{ volumedagannotations|indent(6, True) }}
  {%- else %}
    annotations: {}
  {%- endif %}
  {%- else %} 
    annotations: {}
  {%- endif %}
    enabled: {{ persistdag }}
    size: {{ dagvolumesize }}Mi
    storageClassName: {{ volumedagsc }}
    accessMode: ReadWriteMany
    existingClaim: {{ dagExistingClaim}}
    subPath: dags
  gitSync:
    enabled: false


logs:
  persistence:
    enabled: {{ persistlog }}
    size: {{ logvolumesize }}Mi
    {%- if persistlog  %}
  {%- if volumelogannotations  %}
    annotations: 
{{ volumelogannotations|indent(6, True) }}
  {%- else %}
    annotations: {}
  {%- endif %}
  {%- else %} 
    annotations: {}
  {%- endif %}
    storageClassName: {{ volumelogsc }}
    existingClaim:

migrateDatabaseJob:
  enabled: true
  resources:
    limits:
      cpu: 1
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi  
  extraVolumes:
    - name: root-dir
      emptyDir: {}
  extraVolumeMounts:
    - name: root-dir
      mountPath: /opt/airflow
  useHelmHooks: false


{# workers:
  - name:  dcp-sync
    image: {{ include "base.image" . }}
    imagePullPolicy: {{ .Values.image.pullPolicy }}
    command:
    - /bin/bash
    - -c
    - |
      sleep infinity
  extraInitContainers: [] #}

webserver:  
  replicas: {{ webserverreplicas }}
  labels:
    component: webserver    
  resources:
    limits:
      cpu: {{ webserverlimitcpu }}{% if unitwebserverlimitcpu == "m" %}m{% endif %}
      memory: {{ webserverlimitmem }}{{ unitwebserverlimitmem }}
    requests:
      cpu: {{ webserverrequestcpu }}{% if unitwebserverrequestcpu == "m" %}m{% endif %}
      memory: {{ webserverrequestmem }}{{ unitwebserverrequestmem }}
  defaultUser:
      enabled: true
      role: Admin
      username: admin
      email: admin@example.com
      firstName: admin
      lastName: user
      password: admin      
  extraVolumes:
    - name: root-dir
      emptyDir: {}
  extraVolumeMounts:
    - name: root-dir
      mountPath: /opt/airflow
  {%- if hostAliases is defined %}
  hostAliases:
  {{ hostAliases|indent(2) }}
  {%- else %}
  hostAliases: []
  {%- endif %}      
  webserverConfig: |
  {%- if authtype == "oauth"  %}
    import os
    import logging
    os.environ['SSL_CERT_FILE']='/opt/dcp/keycloak.crt'
    import jwt
    import requests
    from flask import get_flashed_messages, request, redirect, flash


    from base64 import b64decode
    from cryptography.hazmat.primitives import serialization
    from tokenize import Exponent
    from airflow.www.fab_security.manager import AUTH_OAUTH
    from airflow.www.security import AirflowSecurityManager
    from flask_appbuilder import expose
    from flask_appbuilder.security.views import AuthOAuthView

    from airflow import configuration as conf    
    basedir = os.path.abspath(os.path.dirname(__file__))
    log = logging.getLogger(__name__)

    AUTH_TYPE = AUTH_OAUTH
    AUTH_USER_REGISTRATION = True
    AUTH_USER_REGISTRATION_ROLE = "Viewer"

    CLIENT_ID = '{{ name }}'
    CLIENT_SECRET = '{{ clientsecret }}'

    log.info("*******************************************")
    AIRFLOW_URL = '{%- if enableingresstls  %}https://{%- else %}https://{%- endif %}{{ ingresshostname}}/{{ name }}'
    OIDC_ISSUER = '{{ ingressUrl }}/realms/{{ realm }}'    
    OIDC_BASE_URL = "{oidc_issuer}/protocol/openid-connect".format(oidc_issuer=OIDC_ISSUER)
    OIDC_TOKEN_URL = "{oidc_base_url}/token".format(oidc_base_url=OIDC_BASE_URL)
    OIDC_AUTH_URL = "{oidc_base_url}/auth".format(oidc_base_url=OIDC_BASE_URL)
    OIDC_USERINFO_URL = "{oidc_base_url}/userinfo".format(oidc_base_url=OIDC_BASE_URL)
    OIDC_LOGOUT_URL = "{oidc_base_url}/logout?redirect_uri={airflow_url}".format(oidc_base_url=OIDC_BASE_URL, airflow_url=AIRFLOW_URL)
    

    req = requests.get(OIDC_ISSUER, verify=False)
    key_der_base64 = req.json()["public_key"]
    key_der = b64decode(key_der_base64.encode())
    public_key = serialization.load_der_public_key(key_der)
    log.info(key_der_base64)
    log.info("*******************************************")
    AUTH_ROLES_SYNC_AT_LOGIN = True
    {%- if groupmapping is defined and groupmapping|length > 0 %}
    AUTH_ROLES_MAPPING = {
    {%- for gm in groupmapping %}    
      "{{ gm.name }}": ["{{ gm.value }}"],
    {%- endfor %}
    }
    {%- endif %}
    OAUTH_PROVIDERS = [{
        'name':'keycloak',
        'token_key':'access_token',
        'icon':'fa-google',
            'remote_app': {
                'api_base_url':OIDC_BASE_URL,
                'request_token_params':{
                    'scope': 'email profile openid roles'
                },
                'access_token_url': OIDC_TOKEN_URL,
                'authorize_url': OIDC_AUTH_URL,
                'user_info_url': OIDC_USERINFO_URL,
                'client_id': CLIENT_ID,
                'client_secret': CLIENT_SECRET,
                'client_kwargs':{
                    'verify': False
                },
            }
    }]
    class CustomAuthRemoteUserView(AuthOAuthView):
        @expose("/logout/")
        def logout(self):
            """Delete access token before logging out."""
            #return super().logout()
            super().logout()
            return redirect(OIDC_LOGOUT_URL)
    class CustomSecurityManager(AirflowSecurityManager):
        authoauthview = CustomAuthRemoteUserView
      
        def oauth_user_info(self, provider, response):
            if provider == 'keycloak':
                token = response["access_token"]
                me = jwt.decode(token, public_key, algorithms=['HS256', 'RS256'], audience=CLIENT_ID)
                log.info("*******************************************")
                log.info("user info: {0}".format(me))
                log.info("*******************************************")
                try:
                  groups = me["resource_access"][CLIENT_ID]["roles"] # unsafe
                  log.info("groups: {0}".format(groups))                  
                except:
                  groups = ["airflow_viewer"]
                if len(groups) < 1:
                      groups = ["airflow_viewer"]
                else:
                    groups = [str for str in groups if CLIENT_ID in str]
                userinfo = {
                    "username": me.get("preferred_username"),
                    "email": me.get("email"),
                    "first_name": me.get("given_name"),
                    "last_name": me.get("family_name"),
                    "role_keys": groups,
                }
                log.info("+++++++++++++++++++++++++++++++++++++++++++++")
                log.info("user info: {0}".format(userinfo))
                log.info("+++++++++++++++++++++++++++++++++++++++++++++")
                
                return userinfo
            else:
                return {}
    SECURITY_MANAGER_CLASS = CustomSecurityManager  
  {%- endif %}




  {%- if authtype == "ldap"  %}
    import os
    from flask_appbuilder.security.manager import AUTH_LDAP

    AUTH_TYPE = AUTH_LDAP
    AUTH_LDAP_SERVER = "{{ ldapurl }}"
    AUTH_LDAP_USE_TLS = False 
    {% if enableldap and enableldaptls %}
    AUTH_LDAP_TLS_CACERTFILE = '/opt/dcp/extras/ldap.cert'
    {%- endif %}
{{ authldapconfig|indent(4, True) }}
    # a mapping from LDAP DN to a list of FAB roles
    AUTH_ROLES_MAPPING = {
        "cn=mygroup,ou=Groups,dc=example,dc=org": ["Admin"],
        "mygroup": ["Admin"],
    }
    # if we should replace ALL the user's roles each login, or only on registration
    AUTH_ROLES_SYNC_AT_LOGIN = True

    # force users to re-auth after 30min of inactivity (to keep roles in sync)
    PERMANENT_SESSION_LIFETIME = 1800        
  {%- endif %}

scheduler:
  replicas: {{ schedulerreplicas }}
  labels:
    component: scheduler
  resources:
    limits:
      cpu: {{ schedulerlimitcpu }}{% if unitschedulerlimitcpu == "m" %}m{% endif %}
      memory: {{ schedulerlimitmem }}{{ unitschedulerlimitmem }}
    requests:
      cpu: {{ schedulerrequestcpu }}{% if unitschedulerrequestcpu == "m" %}m{% endif %}
      memory: {{ schedulerrequestmem }}{{ unitschedulerrequestmem }}
  extraVolumes:
    - name: root-dir
      emptyDir: {}
    #- name: daglog-dir
    #  emptyDir: {}
  extraVolumeMounts:
    - name: root-dir
      mountPath: /opt/airflow
    #- name: daglog-dir
    #  mountPath: /opt/airflow/logs/dag_processor_manager


triggerer:
  enabled: true
  replicas: {{ triggerreplicas }}
  labels:
    component: triggerer
  resources:
    limits:
      cpu: {{ triggerlimitcpu }}{% if unittriggerlimitcpu == "m" %}m{% endif %}
      memory: {{ triggerlimitmem }}{{ unittriggerlimitmem }}
    requests:
      cpu: {{ triggerrequestcpu }}{% if unittriggerrequestcpu == "m" %}m{% endif %}
      memory: {{ triggerrequestmem }}{{ unittriggerrequestmem }}
  extraVolumes:
    - name: root-dir
      emptyDir: {}
  extraVolumeMounts:
    - name: root-dir
      mountPath: /opt/airflow
  persistence:
    enabled: {{ enabletriggerpersistence }}
    size: {{ triggerdatasize }}Mi
    storageClassName: {{ storageClassName }}
    {%- if storageclassannotation is defined %}
    annotations:    
{{ storageclassannotation|indent(6, True) }}
    {%- else %}
    annotations: {}
    {%- endif %}
    fixPermissions: false
    annotations: {}


createUserJob:
  labels:
    component: createuserjob
  serviceAccount:
    create: {{ specifyserviceaccount }}
    name: {{ servicecaccount }}
  resources:
    limits:
      cpu: 1
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi    
  extraVolumes:
    - name: root-dir
      emptyDir: {}
  extraVolumeMounts:
    - name: root-dir
      mountPath: /opt/airflow
  useHelmHooks: false

redis:
  enabled: true


statsd:
  enabled: {{ enablemonitoring }}
  securityContexts:
    pod:
      runAsUser: {{ runasuser }}
      runAsNonRoot: true
    container:
      readOnlyRootFilesystem: true
      runAsUser: {{ runasuser }}
      allowPrivilegeEscalation: false
      seccompProfile:
        type: RuntimeDefault
      capabilities:
        drop: ["ALL"] 

pgbouncer:
  enabled: false

flower:
  enabled: false


openshift:
  enabled: {{ enableroute }}
  externalSecure: {{ externalSecure }}
  route:
    host: {{ ingresshostname }}
    {%- if usedcpingress %}
    path: /{{ name }}
    {%- else %}
    path: ""
    {%- endif %}
    targetPort: {{ targetPort }}
    insecureEdgeTerminationPolicy: {{ insecureEdgeTerminationPolicy }}

ingress:
  enabled: ~
  web:
    enabled: {{ enableingress }}
    
    {%- if nginxannotation is defined %}
    annotations:
{{ nginxannotation|indent(6, True) }}    
    {%- else %}
    annotations: {}
    {%- endif %}

    path: "/{{name}}"
    pathType: "ImplementationSpecific"
    host: {{ingresshostname}}     
    ingressClassName: ""

    tls:
      enabled: {{ enableingresstls }}
      {%- if enableingresstls %}
      secretName: "{{ name }}-{{ nameOverride}}-tls"
      {%- else %}
      secretName: ""
      {%- endif %}
  
    precedingPaths:
      - path: "/{{name}}"
        serviceName: "{{name}}-webserver"
        pathType: "ImplementationSpecific"
        {%- if ingressnumber %}
        servicePort: 8080
        {%- else %}
        servicePort: "airflow-ui"
        {%- endif %}
    succeedingPaths:
      - path: "/{{name}}"
        serviceName: "{{name}}-webserver"
        pathType: "ImplementationSpecific"
        {%- if ingressnumber %}
        servicePort: 8080
        {%- else %}
        servicePort: "airflow-ui"
        {%- endif %}



extras:
  enabled: true
  syncenabled: {{ persistdag }}
  securityenabled: {{ securityenabled }}
  modpermisssions: false
  name: "{{ name }}"
  nameOverride: "{{ nameOverride }}"
  fullnameOverride: ""
  namespaceOverride: "{{ namespace }}"
  portpgs: {{ portpgs }}
  enablesyncingrss: false
  
  enablepasswd: {{ enablepasswd }}
  enableldap: {{ enableldap }}
  enableldaptls: {{ enableldaptls }}
  runasuser: "{{ runasuser }}"

  clusterDomain: {{ clusterDomain }}
  storageClassName: {{ storageClassName }}
  enableingresstls: {{ enableingresstls }}
  usedcpingress: {{ usedcpingress }}
  enableauthent: {{ enableauthent }}

  global:
    {%- if imagePullSecrets is defined and imagePullSecrets|length > 0 %}
    imagePullSecrets:
    {%- for imagePullSecret in imagePullSecrets %}
      - {{ imagePullSecret }}
    {%- endfor %}
    {%- else %}
    imagePullSecrets: []
    {%- endif %}

  image:
    registry: "{{ registrysync }}"
    repository: "{{ repositorysync }}"
    pullPolicy: "{{ pullpolicy }}"
    tag: "{{ tagsync }}"
    pullSecrets: []

  {%- if commonLabels is defined and commonLabels|length > 0 %}
  commonLabels:
  {%- for commonLabel in commonLabels %}
    {{ commonLabel.name }}: "{{ commonLabel.value }}"
  {%- endfor %}
  {%- else %}
  commonLabels: {}
  {%- endif %}

  {%- if commonAnnotations is defined and commonAnnotations|length > 0 %}
  commonAnnotations:
  {%- for commonAnnotation in commonAnnotations %}
    {{ commonAnnotation.name }}: "{{ commonAnnotation.value }}"
  {%- endfor %}
  {%- else %}
  commonAnnotations: {}
  {%- endif %}

  {%- if podLabels is defined and podLabels|length > 0 %}
  podLabels:
  {%- for podLabel in podLabels %}
    {{ podLabel.name }}: "{{ podLabel.value }}"
  {%- endfor %}
  {%- else %}
  podLabels: {}
  {%- endif %}

  {%- if podAnnotations is defined and podAnnotations|length > 0 %}
  podAnnotations:
  {%- for podAnnotation in podAnnotations %}
    {{ podAnnotation.name }}: "{{ podAnnotation.value }}"
  {%- endfor %}
  {%- else %}
  podAnnotations: {}
  {%- endif %}

  diagnosticMode:
    enabled: false
    command:
      - sleep
    args:
      - infinity

  containerSecurityContext:
    enabled: true
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: {{ runasuser }}
    allowPrivilegeEscalation: false
    seccompProfile:
      type: RuntimeDefault
    capabilities:
      drop: ["ALL"]   

  podSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: {{ runasuser }}
    fsGroup: {{ runasuser }}

  hostNetwork: false

  {%- if dnsConfig is defined %}
  dnsConfig:
  {{ dnsConfig|indent(2, True) }}
  {%- else %}
  dnsConfig: []
  {%- endif %}

  {%- if hostAliases is defined %}
  hostAliases:
  {{ hostAliases|indent(2) }}
  {%- else %}
  hostAliases: []
  {%- endif %}
    

  nodeSelector: {}

  tolerations: []

  affinity: {}

  topologySpreadConstraints: []

  priorityClassName: "{{ priorityclassname }}"

  schedulerName: "{{ kubeschedulername }}"

  updateStrategy:
    type: RollingUpdate


  terminationGracePeriodSeconds: ""

  serviceAccount:
    enabled: true
    create: {{ specifyserviceaccount }}
    name: "{{ servicecaccount }}"
    {%- if podAnnotations is defined and podAnnotations|length > 0 %}
    annotations:
    {%- for podAnnotation in podAnnotations %}
      {{ podAnnotation.name }}: "{{ podAnnotation.value }}"
    {%- endfor %}
    {%- else %}
    annotations: {}
    {%- endif %}
    automountServiceAccountToken: true

  certmanager:
    enabled: false
    issuer: ca-issuer
    duration: 8760h
    renewBefore: 2208h
    dnsNames:
      - "*.svc.cluster.local" 
      - "*.*.*.svc.cluster.local"
      - "*.*.svc.cluster.local"
      - "*.dcp-technologies.com"
      - "*.test"
      - "localhost"
      - "*.apps.sandbox-m2.ll9k.p1.openshiftapps.com"  

  security:
    ssl:
      autoGenerated: true

  oauth:
    registry: "{{ oauthregistry }}"
    repository: "{{ oauthrepository }}"
    pullPolicy: "{{ pullpolicy }}"
    tag: "{{ oauthtag }}"
    pullSecrets: []
    cookiesecret: "{{clientsecret}}"
    oidcissuer: "{{ ingresshostname }}/{{ serverPath }}/realms/{{realm}}"
    ingresshostname: "{{ ingresshostname }}"
    proxyscope: "email openid profile"
    allwedgroups: "{{realm}}"
    allwedroles: "{{realm}},{{name}}"
    idclient: "{{name}}"
    clientsecret: "{{clientsecret}}"
    realm: "{{realm}}"
    setauthorizationheader: true
    passauthorizationheader: true
    skipproviderbutton: true
    whitelistdomain: "{{ whitelistdomain }}"
    redisurl: "{{ redisurl }}"
    redispassword: "{{ redispassword }}"
    sessionstore: "{{ sessionstore }}"

  service:
    type: ClusterIP
    port: 9090

  resources:
    requests:
        memory: 1G
        cpu: 100m
    limits: 
      memory: 2G
      cpu: 1100m

  vextraVolumeMounts: []
  extraVolumes: []

  claimName: "{{ name}}-dags"

  ldapcertificate: |
{{ ldapcertificate|indent(4, True)}}


  prometheus:
    image:
      registry: "{{ prometheusregistry }}"
      repository: "{{ prometheusrepository }}"
      pullPolicy: "{{ pullpolicy }}"
      tag: "{{ prometheustag }}"
      pullSecrets: []
    retention: "1d"
    port: 9090
    resources:       
      requests:
          memory: {{ prometheusrequestmem }}{{ prometheusunitrequestmem }}
          cpu: {{ prometheusrequestcpu }}{% if prometheusunitrequestcore == "m" %}m{% endif %}
      limits: 
          memory: {{ prometheuslimitmem }}{{ prometheusunitlimitmem }}
          cpu: {{ prometheuslimitcpu }}{% if prometheusunitlimitcore == "m" %}m{% endif %}

  grafana:
    enabled: {{ enablemonitoring }}
    enabledahboard: {{ enabledahboard }}
    image:
      registry: "{{ grafanaregistry }}"
      repository: "{{ grafanarepository }}"
      pullPolicy: "{{ pullpolicy }}"
      tag: "{{ grafanatag }}"
      pullSecrets: []
    
    replicas: 1

    podSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: {{ runasuser }}
      runAsGroup: {{ runasuser }}
      fsGroup: {{ runasuser }}

    resources: 
      limits: 
          memory: {{ grafanalimitmem }}{{ grafanaunitlimitmem }}
          cpu: {{ grafanalimitcpu }}{% if grafanaunitlimitcore == "m" %}m{% endif %}
      requests:
          memory: {{ grafanarequestmem }}{{ grafanaunitrequestmem }}
          cpu: {{ grafanarequestcpu }}{% if grafanaunitrequestcore == "m" %}m{% endif %}

    grafana.ini:
      paths:
        data: /var/lib/grafana/
        logs: /var/log/grafana
        plugins: /var/lib/grafana/plugins
        provisioning: /etc/grafana/provisioning
      server:
        domain: {{ ingresshostname }}
        root_url: https://{{ ingresshostname }}/{{ name }}/dashboard
        serve_from_sub_path: true
        {# {%- if enableingresstls and not enableauthent %}
        cert_key: /certs/tls.key
        cert_file: /certs/tls.crt
        protocol: https
        {%- endif %} #}
      
      
      {%- if anonymousauthent %}
      auth.anonymous:
        enabled: true
      auth:
        disable_login_form: true
      {%- else %}
      auth.generic_oauth:
        enabled: {{ enableauthent }}
        scopes: openid email profile
        name: Keycloak
        tls_skip_verify_insecure: true
        allow_sign_up: true
        client_id: {{ name }}
        client_secret: {{ clientsecret }}
        auth_url: {{ ingressUrl }}/realms/{{ realm }}/protocol/openid-connect/auth
        token_url: {{ ingressUrl }}/realms/{{ realm }}/protocol/openid-connect/token
        api_url: {{ ingressUrl }}/realms/{{ realm }}/protocol/openid-connect/userinfo
      {%- endif %}


    service:
      type: "ClusterIP"
      clusterIP: ""
      annotations: {}

      port: {{ grafanaport }}
      targetPort: {{ grafanaport }}
      name: grafana

      oauthportname: oauthhttp
      oauthhttp: 4180
      oauthhttps: 4180

    extraVolumeMounts:
      - name: database
        mountPath: /var/lib/grafana
    extraVolumes:
      - name: database
        emptyDir: {}

  openshift:
    enabled: {{ enableroute }}
    externalSecure: {{ externalSecure }}
    route:
      host: {{ ingresshostname }}
      {%- if usedcpingress %}
      path: /{{ name }}
      {%- else %}
      path: ""
      {%- endif %}
      targetPort: {{ targetPort }}
      insecureEdgeTerminationPolicy: {{ insecureEdgeTerminationPolicy }}

  ingress:
    enabled: {{ enableingress }}

    {%- if ingressnumber %}

    {%- if usedcpingress %}
    {%- if enableauthent %}
    ingresstype: 4180
    {%- else %}
    ingresstype: { grafanaport }}
    {%- endif %}
    {%- else %}
    ingresstype: { grafanaport }}
    {%- endif %}
    
    
    {%- else %}
    {%- if enableauthent %}
    ingresstype: oauthhttp
    {%- else %}
    ingresstype: grafana
    {%- endif %}
    {%- endif %}

    pathType: ImplementationSpecific
    apiVersion: ""
    hostname: {{ ingresshostname }}
    ingressClassName: ""
    path: /{{ name }}/dashboard
    className: ""

    
      {%- if nginxannotation is defined %}
    annotations:
{{ nginxannotation|indent(6, True) }}
    {%- else %}
    annotations: {}
    {%- endif %}

    tls: true
    selfSigned: true
    extraHosts: []
    extraPaths: []
    extraTls: []
    secrets: []
    extraRules: []


  ca:
    crt: {{ cacrt }}
    key: {{ cakey }}
  tls:
    crt: {{ tlscrt }}
    key: {{ tlskey }}  



pgs:
  enabled: true
  nameOverride: "{{nameOverride}}pgs"
  fullnameOverride: ""
  architecture: {{ architecture }}

  {%- if podLabels is defined and podLabels|length > 0 %}
  commonLabels:
  {%- for podLabel in podLabels %}
    {{ podLabel.name }}: {{ podLabel.value }}
  {%- endfor %}
  {%- else %}
  commonLabels: {}
  {%- endif %}

  {%- if commonAnnotations is defined and commonAnnotations|length > 0 %}
  commonAnnotations:
  {%- for commonAnnotation in commonAnnotations %}
    {{ commonAnnotation.name }}: {{ commonAnnotation.value }}
  {%- endfor %}
  {%- else %}
  commonAnnotations: {}
  {%- endif %}

  {%- if podAnnotations is defined and podAnnotations|length > 0 %}
  podAnnotations:
  {%- for podAnnotation in podAnnotations %}
      {{ podAnnotation.name }}: "{{ podAnnotation.value }}"
  {%- endfor %}
  {%- else %}
  podAnnotations: {}
  {%- endif %}  

  volumePermissions:
    enabled: false
    securityContext:
      runAsUser: "auto"

  shmVolume:
    chmod:
      enabled: false  
  
  image:
    registry: {{ pgsregistry }}
    repository: {{ pgsrepository }}
    tag: {{ pgstag }}
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []

  containerPorts:
    postgresql: {{portpgs}}

  global:
    {%- if imagePullSecrets is defined and imagePullSecrets|length > 0 %}
    imagePullSecrets:
    {%- for imagePullSecret in imagePullSecrets %}
      - {{ imagePullSecret }}
    {%- endfor %}
    {%- else %}
    imagePullSecrets: []
    {%- endif %}  
    storageClass: {{ storageClassName }}
    postgresql:
      auth:
        postgresPassword: "{{ dbrootpassword }}"
        username: "{{ dbuser }}"
        password: "{{ dbpassword }}"
        database: "{{ dbname }}"

  primary:
    schedulerName: "{{ kubeschedulername }}"

    podSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: {{ runasuser }}
      fsGroup: {{ runasuser }}

    containerSecurityContext:
      enabled: true
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: {{runasuser}}
      allowPrivilegeEscalation: false
      seccompProfile:
        type: RuntimeDefault
        #localhostProfile: 
      capabilities:
        drop: ["ALL"]

    extraVolumeMounts:
      # if readonly filesystem
      - name: dcp-conf
        mountPath: /opt/bitnami
      {%- if not dbpersist %}
      # If persistence is disabled
      - name: dcp-data
        mountPath: /opt/dcp
      {%- endif %}
      - name: dcp-tmp
        mountPath: /tmp
    extraVolumes:
      # if readonly filesystem
      - name: dcp-conf
        emptyDir: {}
      {%- if not dbpersist %}
      # If persistence is disabled
      - name: dcp-data
        emptyDir: {}
      {%- endif %}
      - name: dcp-tmp
        emptyDir: {}

    command:
      - bash
      - -c
      - |
        cp -R /opt/dsp/postgresql /opt/bitnami
        cp -R /opt/dsp/licenses /opt/bitnami
        cp -R /opt/dsp/scripts /opt/bitnami
        cp -R /opt/dsp/common /opt/bitnami

        chmod 777 "/opt/bitnami/*"
        chmod -R 777 "/opt/bitnami/*"

        /opt/bitnami/scripts/postgresql/postunpack.sh
        /opt/bitnami/scripts/locales/add-extra-locales.sh

        export APP_VERSION="15.4.0"
        export BITNAMI_APP_NAME="postgresql"
        export LANG="en_US.UTF-8"
        export LANGUAGE="en_US:en"
        export NSS_WRAPPER_LIB="/opt/bitnami/common/lib/libnss_wrapper.so"
        export PATH="/opt/bitnami/postgresql/bin:$PATH"

        # if persistence is disabled
        {%- if not dbpersist %}
        mkdir /bitnami/postgresql/data
        {%- endif %}

        /opt/bitnami/scripts/postgresql/entrypoint.sh /opt/bitnami/scripts/postgresql/run.sh

    persistence:
      enabled: {{ dbpersist }}
      storageClass: {{ storageClassName }}
      size: {{ dbsize }}Mi
      labels: 
        {%- if podLabels is defined and podLabels|length > 0 %}
        {%- for podLabel in podLabels %}
        {{ podLabel.name }}: "{{ podLabel.value }}"
        {%- endfor %}
        {%- else %}
        release: {{ nameOverride }}
        {%- endif %}
    resources:
      limits: 
        memory: {{ limitmempgs }}{{unitlimitmempgs}}
        cpu: {{ limitcpupgs }}{% if unitlimitcpupgs == "m" %}m{% endif %}
      requests:
        memory: {{ requestmempgs }}{{unitrequestmempgs}}
        cpu: {{ requestcpupgs }}{% if unitrequestcpupgs == "m" %}m{% endif %}

  readReplicas:
    name: read
    replicaCount: {{ readreplicas }}
    schedulerName: "{{ kubeschedulername }}"
    podSecurityContext:
      enabled: true
      runAsNonRoot: true
      runAsUser: {{ runasuser }}
      fsGroup: {{ runasuser }}

    containerSecurityContext:
      enabled: true
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: {{runasuser}}
      allowPrivilegeEscalation: false
      seccompProfile:
        type: RuntimeDefault
        #localhostProfile: 
      capabilities:
        drop: ["ALL"]

    extraVolumeMounts:
      # if readonly filesystem
      - name: dcp-conf
        mountPath: /opt/bitnami
      {%- if not dbpersist %}
      # If persistence is disabled
      - name: dcp-data
        mountPath: /opt/dcp
      {%- endif %}
      - name: dcp-tmp
        mountPath: /tmp
    extraVolumes:
      # if readonly filesystem
      - name: dcp-conf
        emptyDir: {}
      {%- if not dbpersist %}
      # If persistence is disabled
      - name: dcp-data
        emptyDir: {}
      {%- endif %}
      - name: dcp-tmp
        emptyDir: {}

    command:
      - bash
      - -c
      - |
        cp -R /opt/dsp/postgresql /opt/bitnami
        cp -R /opt/dsp/licenses /opt/bitnami
        cp -R /opt/dsp/scripts /opt/bitnami
        cp -R /opt/dsp/common /opt/bitnami

        chmod 777 "/opt/bitnami/*"
        chmod -R 777 "/opt/bitnami/*"

        /opt/bitnami/scripts/postgresql/postunpack.sh
        /opt/bitnami/scripts/locales/add-extra-locales.sh

        export APP_VERSION="15.4.0"
        export BITNAMI_APP_NAME="postgresql"
        export LANG="en_US.UTF-8"
        export LANGUAGE="en_US:en"
        export NSS_WRAPPER_LIB="/opt/bitnami/common/lib/libnss_wrapper.so"
        export PATH="/opt/bitnami/postgresql/bin:$PATH"

        # if persistence is disabled
        {%- if not dbpersist %}
        mkdir /bitnami/postgresql/data
        {%- endif %}

        /opt/bitnami/scripts/postgresql/entrypoint.sh /opt/bitnami/scripts/postgresql/run.sh

    persistence:
      enabled: {{ dbpersist }}
      storageClass: {{ storageClassName }}
      size: {{ dbsize }}Mi
      labels: 
        {%- if podLabels is defined and podLabels|length > 0 %}
        {%- for podLabel in podLabels %}
        {{ podLabel.name }}: "{{ podLabel.value }}"
        {%- endfor %}
        {%- else %}
        release: {{ nameOverride }}
        {%- endif %}
    resources:
      limits: 
        memory: {{ limitmempgs }}{{unitlimitmempgs}}
        cpu: {{ limitcpupgs }}{% if unitlimitcpupgs == "m" %}m{% endif %}
      requests:
        memory: {{ requestmempgs }}{{unitrequestmempgs}}
        cpu: {{ requestcpupgs }}{% if unitrequestcpupgs == "m" %}m{% endif %}    